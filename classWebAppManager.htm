<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>LunaSysMgr: WebAppManager Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">LunaSysMgr
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li><a href="dirs.htm"><span>Directories</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classWebAppManager.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">WebAppManager Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="WebAppManager" --><!-- doxytag: inherits="SyncTask,Trackable,PIpcClient,PIpcChannelListener" -->
<p><code>#include &lt;<a class="el" href="WebAppManager_8h_source.htm">WebAppManager.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for WebAppManager:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classWebAppManager__inherit__graph.svg" width="495" height="272"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.htm">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for WebAppManager:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classWebAppManager__coll__graph.svg" width="1003" height="368"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a target="top" href="graph_legend.htm">legend</a>]</span></center></div>

<p><a href="classWebAppManager-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a110c022a0d9e1f524cc6c5ea43684522">~WebAppManager</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a87036350d7f48562f6466b2ed78251b4">run</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">Event::Orientation&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#af69923b9e5cc577cd398cad789256e5a">orientation</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::list&lt; const <a class="el" href="classProcessBase.htm">ProcessBase</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a54a96e6129c79e0ad2364849322b3533">runningApps</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::list&lt; const <a class="el" href="classProcessBase.htm">ProcessBase</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ad3d79811d4db58d3fcac0955a9fa199c">runningApps</a> (<a class="el" href="classWindow.htm#ad1e881db9a42ec6c27e7e4978912534d">Window::Type</a> winType)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classWebAppBase.htm">WebAppBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#aef889d2d8e182cf99272e321bc144939">findApp</a> (const std::string &amp;processId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classWebAppBase.htm">WebAppBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a87ecb37699f96e94f5a136f921e7d411">findAppById</a> (const std::string &amp;appId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ae3b96cc5063ed260c2e3ea4df81319ce">initiateLunaStatsReporting</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">LSHandle *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#aba9abcc1c41430052d8d22f19bb3f0aa">getStatsServiceHandle</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#aed4155a6c9c85010106eb113a6161649">copiedToClipboard</a> (const std::string &amp;appId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a96189e68004ab307a6afa1c894fa1253">pastedFromClipboard</a> (const std::string &amp;appId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a59b41a9eba71789eab129d565c7d7fdb">closePageSoon</a> (<a class="el" href="classWebPage.htm">WebPage</a> *page)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ad79cd091e23671d6f1c7417701cf6194">onMessageReceived</a> (const PIpcMessage &amp;msg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a62dff3807ddd095c64fb93eed00f40e7">onDisconnected</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a11b4bfea7c330d0e3020ac16069a560a">setJavascriptFlags</a> (const std::string &amp;flags)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a45bfba43fcd800ec15b39bbb86315c76">sendAsyncMessage</a> (PIpcMessage *msg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a83ddc54a146bd603138156a7fa1be192">markUniversalSearchReady</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#af0b176414579613c9ee247a36420ba42">closeByProcessId</a> (const std::string &amp;processId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ad964e91247693849907893557fef4083">setHostInfo</a> (const <a class="el" href="structHostInfo.htm">HostInfo</a> *hostInfo)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structHostInfo.htm">HostInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#af98e49244864c5d271f5e8260923a826">getHostInfo</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a7637244516e4a8b61ad3d4abbf3fa4e6">reportAppLaunched</a> (const std::string &amp;appId, const std::string &amp;processId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#aa2197dd384b1c7e31bedea92fd3cb906">reportAppClosed</a> (const std::string &amp;appId, const std::string &amp;processId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classint.htm">int</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a1d8b90bbf888d01a10477bd375fdd090">currentUiWidth</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classint.htm">int</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a7fa0f693f0152c7c762ce070bd52dbec">currentUiHeight</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#aaecf3c6d00a4eb7e0dbdedbcef92dd45">isDevicePortraitType</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ac24b7ed0ed82b52d5a433b3465458f12">disableAppCaching</a> (bool disable)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a5866bdb86479a3503f3527fed8e7e89f">setInSimulatedMouseEvent</a> (bool val)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a0fe9c755fcb0ea48c31255a5cf9cef72">inSimulatedMouseEvent</a> () const </td></tr>
<tr><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classWebAppManager.htm">WebAppManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a23ddfa07ab71c971fd7b6b05e90456b5">instance</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a7ae867c2d3e7b8262a5dea2ddf81643e">hasBeenInstanced</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ab73e76829c4f0444ffc937fa480e0425">getTimeZone</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structSharedGlobalProperties.htm">SharedGlobalProperties</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a9ada8029fb05c3bcbad5c47c1ad2e96e">globalProperties</a> ()</td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#aefe25b78f15639fe8499a24e12b98472">onLaunchUrl</a> (const std::string &amp;url, <a class="el" href="classint.htm">int</a> winType, const std::string &amp;appDesc, const std::string &amp;procId, const std::string &amp;args, const std::string &amp;launchingAppId, const std::string &amp;launchingProcId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ae19211f24d21f0c6d03f0cf549781a02">onLaunchUrlChild</a> (const std::string &amp;url, <a class="el" href="classint.htm">int</a> winType, const std::string &amp;appDesc, const std::string &amp;procId, const std::string &amp;args, const std::string &amp;launchingAppId, const std::string &amp;launchingProcId, <a class="el" href="classint.htm">int</a> &amp;errorCode, bool isHeadless)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a2bba205dc03e2d17e7af9cf53e41ad1d">onRelaunchApp</a> (const std::string &amp;procId, const std::string &amp;args, const std::string &amp;launchingAppId, const std::string &amp;launchingProcId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#aed8d6836bb54bd168490750383724c52">onSetOrientation</a> (<a class="el" href="classint.htm">int</a> orient)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a2032767b50971a79aee30e8545b105c8">onGlobalProperties</a> (<a class="el" href="classint.htm">int</a> key)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#afc255fb98cf5eb342430c9606ad9b86c">onInspectByProcessId</a> (const std::string &amp;processId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#af947cc35be552c65680fd07ae8b0068d">performLowMemoryActions</a> (const bool allowExpensive=false)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#aaa3a65ee2f479d6c5978bb7b7ca31b29">monitorNativeProcessMemory</a> (const pid_t pid, const <a class="el" href="classint.htm">int</a> maxMemory, pid_t updateFromPid=0)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a8edd09bc18b44a5d6ed92daa843ad4e0">clearWebkitCache</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a725ff150a13bf6ee6e8af8a7c9258de5">enableDebugger</a> (bool enable)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a6840696e9f54590ae548d810af636ec1">onShutdownEvent</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a5c213b609e4b55d1a966b1ae6d4f2745">onKillApp</a> (const std::string &amp;appId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a439c9272b9f1136981f725d325bedd47">onSyncKillApp</a> (const std::string &amp;appId, bool *result)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a2c0ad973f79cc678d7d15f46aa7f3319">onProcMgrLaunch</a> (const std::string &amp;appDescString, const std::string &amp;params, const std::string &amp;launchingAppId, const std::string &amp;launchingProcId)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ad65fec6705513b7b6017c9ad0f99b02e">onProcMgrLaunchChild</a> (const std::string &amp;appDescString, const std::string &amp;params, const std::string &amp;launchingAppId, const std::string &amp;launchingProcId, bool isHeadless, bool isParentPdk)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a4f9d41308eca294b862002dee99af008">onProcMgrLaunchBootTimApp</a> (const std::string &amp;appDescString)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a29ddd3137b7b631e68980dcb5ec202c8">onListOfRunningAppsRequest</a> (bool includeSysApps)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a2aa32a6d0b923ad414bec59df1e5638c">onDeleteHTML5Database</a> (const std::string &amp;domain)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a28cb0f85080b116c6f3f4e2769d15dff">inputEvent</a> (<a class="el" href="classint.htm">int</a> ipcKey, <a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt; e)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#affa9b5e9716c661c02577221f0dc0847">onUiDimensionsChanged</a> (<a class="el" href="classint.htm">int</a> width, <a class="el" href="classint.htm">int</a> height)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a8558dd09a6bc1c43980af07369e74506">onSuspendWebkitProcess</a> (bool *result)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ac6d5e66f626d13e5629ccedf8b9727ec">threadStarting</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ae24c78fa19b8ba2ee4db84d156e9ca83">threadStopping</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ab85778ebfbe8ef55346d7408970e7f72">handleEvent</a> (<a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt;)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a8ea12e7350a476a80fc075f217bcb197">windowedAppAdded</a> (<a class="el" href="classWindowedWebApp.htm">WindowedWebApp</a> *app)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a81c7925f0bb7917633f010cb284623e3">windowedAppKeyChanged</a> (<a class="el" href="classWindowedWebApp.htm">WindowedWebApp</a> *app, <a class="el" href="classint.htm">int</a> oldKey)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a409179dea97cca3400e642d3eebbb037">windowedAppRemoved</a> (<a class="el" href="classWindowedWebApp.htm">WindowedWebApp</a> *app)</td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a2f57502cb2c89161e13ed7a91fc85596">WebPage</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#adde74168d71d7bdbd1c678daff261c8e">WebAppBase</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ab9b68cba58a2091180367c2ca996f5ad">WindowedWebApp</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ace0bfd3a9d3b369ca160e1f7fc93fc9b">MemoryWatcher</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#af04fabd91189ed6162b4346d5564b37a">JsSysObject</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#aae1b23ca2095392f601c72e9777dd39d">CardWebApp</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#adf0accd1c50086338b2ac58012637639">AlertWebApp</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#a66b64d915ff97a41c6847e109e61b419">DashboardWebApp</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classWebAppManager.htm#ae1701c7594fe2cf1c96b951a52eb0396">ProcessManager</a></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Manages running web apps </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a110c022a0d9e1f524cc6c5ea43684522"></a><!-- doxytag: member="WebAppManager::~WebAppManager" ref="a110c022a0d9e1f524cc6c5ea43684522" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classWebAppManager.htm#a110c022a0d9e1f524cc6c5ea43684522">WebAppManager::~WebAppManager</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Shuts down and cleans up this process's instance of <a class="el" href="classWebAppManager.htm">WebAppManager</a></p>
<p>Closes all web apps managed by this <a class="el" href="classWebAppManager.htm">WebAppManager</a>.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000041">Todo:</a></b></dt><dd>Confirm this. </dd></dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a8edd09bc18b44a5d6ed92daa843ad4e0"></a><!-- doxytag: member="WebAppManager::clearWebkitCache" ref="a8edd09bc18b44a5d6ed92daa843ad4e0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a8edd09bc18b44a5d6ed92daa843ad4e0">WebAppManager::clearWebkitCache</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Clears the global system WebKit cache</p>
<dl class="see"><dt><b>See also:</b></dt><dd>Palm::WebGlobal::clearDOMCache() </dd></dl>

</div>
</div>
<a class="anchor" id="af0b176414579613c9ee247a36420ba42"></a><!-- doxytag: member="WebAppManager::closeByProcessId" ref="af0b176414579613c9ee247a36420ba42" args="(const std::string &amp;processId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#af0b176414579613c9ee247a36420ba42">WebAppManager::closeByProcessId</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>processId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Finds an app by its process ID and closes it</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">processId</td><td>Process ID of the app to close. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a59b41a9eba71789eab129d565c7d7fdb"></a><!-- doxytag: member="WebAppManager::closePageSoon" ref="a59b41a9eba71789eab129d565c7d7fdb" args="(WebPage *page)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a59b41a9eba71789eab129d565c7d7fdb">WebAppManager::closePageSoon</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classWebPage.htm">WebPage</a> *&#160;</td>
          <td class="paramname"><em>page</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Close a page after processing events</p>
<p>Queues up an event to close the given page so that once the event queue finishes processing all current events it goes through and closes all pages which <a class="el" href="classWebAppManager.htm">WebAppManager</a> has been asked to close by then.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">page</td><td><a class="el" href="classPage.htm">Page</a> to queue up to close. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aed4155a6c9c85010106eb113a6161649"></a><!-- doxytag: member="WebAppManager::copiedToClipboard" ref="aed4155a6c9c85010106eb113a6161649" args="(const std::string &amp;appId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#aed4155a6c9c85010106eb113a6161649">WebAppManager::copiedToClipboard</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Adds a banner to indicate that text has been copied to the clipboard</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000043">Todo:</a></b></dt><dd>Document this more fully once BannerMessageEvent and <a class="el" href="classBannerMessageEventFactory.htm">BannerMessageEventFactory</a> are documented</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">appId</td><td>App ID of the app that copied text to the clipboard. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7fa0f693f0152c7c762ce070bd52dbec"></a><!-- doxytag: member="WebAppManager::currentUiHeight" ref="a7fa0f693f0152c7c762ce070bd52dbec" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classint.htm">int</a> <a class="el" href="classWebAppManager.htm#a7fa0f693f0152c7c762ce070bd52dbec">WebAppManager::currentUiHeight</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Gets the height of the UI in pixels</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000050">Todo:</a></b></dt><dd>Document this once <a class="el" href="classWebAppManager.htm#affa9b5e9716c661c02577221f0dc0847">WebAppManager::onUiDimensionsChanged()</a> is documented.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classWebAppManager.htm#affa9b5e9716c661c02577221f0dc0847">WebAppManager::onUiDimensionsChanged()</a></dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Height of UI. </dd></dl>

</div>
</div>
<a class="anchor" id="a1d8b90bbf888d01a10477bd375fdd090"></a><!-- doxytag: member="WebAppManager::currentUiWidth" ref="a1d8b90bbf888d01a10477bd375fdd090" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classint.htm">int</a> <a class="el" href="classWebAppManager.htm#a1d8b90bbf888d01a10477bd375fdd090">WebAppManager::currentUiWidth</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Gets the width of the UI in pixels</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000049">Todo:</a></b></dt><dd>Document this once <a class="el" href="classWebAppManager.htm#affa9b5e9716c661c02577221f0dc0847">WebAppManager::onUiDimensionsChanged()</a> is documented.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classWebAppManager.htm#affa9b5e9716c661c02577221f0dc0847">WebAppManager::onUiDimensionsChanged()</a></dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Width of UI. </dd></dl>

</div>
</div>
<a class="anchor" id="ac24b7ed0ed82b52d5a433b3465458f12"></a><!-- doxytag: member="WebAppManager::disableAppCaching" ref="ac24b7ed0ed82b52d5a433b3465458f12" args="(bool disable)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#ac24b7ed0ed82b52d5a433b3465458f12">WebAppManager::disableAppCaching</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>disable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Disables/enables caching of apps when they're closed</p>
<p>By default under certain circumstances apps can be cached when they're closed. This allows you to disable/enable that functionality.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000051">Todo:</a></b></dt><dd>Document this a bit more fully once <a class="el" href="classWebAppBase.htm#a7a7be87f1a9d09e03ca4411b773a61e0">WebAppBase::freezeInCache()</a> is fully documented.</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">disable</td><td>true to disable app caching, false to enable it. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a725ff150a13bf6ee6e8af8a7c9258de5"></a><!-- doxytag: member="WebAppManager::enableDebugger" ref="a725ff150a13bf6ee6e8af8a7c9258de5" args="(bool enable)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a725ff150a13bf6ee6e8af8a7c9258de5">WebAppManager::enableDebugger</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enable</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Enables the debugger</p>
<p>Current just a wrapper for <a class="el" href="">Palm::WebGlobal::enableDebugger()</a>.</p>
<dl class="see"><dt><b>See also:</b></dt><dd>Palm::WebGlobal::enableDebugger()</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000059">Todo:</a></b></dt><dd>Document this more fully once Palm::WebGlobal::enableDebugger() is publicly documented. </dd></dl>

</div>
</div>
<a class="anchor" id="aef889d2d8e182cf99272e321bc144939"></a><!-- doxytag: member="WebAppManager::findApp" ref="aef889d2d8e182cf99272e321bc144939" args="(const std::string &amp;processId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classWebAppBase.htm">WebAppBase</a> * <a class="el" href="classWebAppManager.htm#aef889d2d8e182cf99272e321bc144939">WebAppManager::findApp</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>processId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find an app by process ID</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">processID</td><td>Process ID of the app to look for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The app itself, if found. </dd></dl>

</div>
</div>
<a class="anchor" id="a87ecb37699f96e94f5a136f921e7d411"></a><!-- doxytag: member="WebAppManager::findAppById" ref="a87ecb37699f96e94f5a136f921e7d411" args="(const std::string &amp;appId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classWebAppBase.htm">WebAppBase</a> * <a class="el" href="classWebAppManager.htm#a87ecb37699f96e94f5a136f921e7d411">WebAppManager::findAppById</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Find an app by app ID</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">appID</td><td>App ID of the app to look for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The app itself, if found. </dd></dl>

</div>
</div>
<a class="anchor" id="af98e49244864c5d271f5e8260923a826"></a><!-- doxytag: member="WebAppManager::getHostInfo" ref="af98e49244864c5d271f5e8260923a826" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structHostInfo.htm">HostInfo</a> &amp; <a class="el" href="classWebAppManager.htm#af98e49244864c5d271f5e8260923a826">WebAppManager::getHostInfo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Gets the cached host device information structure</p>
<p>Retrieves the cached <a class="el" href="structHostInfo.htm">HostInfo</a> structure if it has already been stored using <a class="el" href="classWebAppManager.htm#ad964e91247693849907893557fef4083">WebAppManager::setHostInfo()</a>.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classWebAppManager.htm#ad964e91247693849907893557fef4083">WebAppManager::setHostInfo()</a></dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Cached host device info. </dd></dl>

</div>
</div>
<a class="anchor" id="aba9abcc1c41430052d8d22f19bb3f0aa"></a><!-- doxytag: member="WebAppManager::getStatsServiceHandle" ref="aba9abcc1c41430052d8d22f19bb3f0aa" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">LSHandle * <a class="el" href="classWebAppManager.htm#aba9abcc1c41430052d8d22f19bb3f0aa">WebAppManager::getStatsServiceHandle</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Gets a Luna Service handle to talk to the statistics service</p>
<p>Gets a handle to the statistics service used to report memory statistics to Luna.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000042">Todo:</a></b></dt><dd>Document this a bit more thoroughly once LSPalmService is documented.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd>LSPalmService</dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Handle to the statistics service. </dd></dl>

</div>
</div>
<a class="anchor" id="ab73e76829c4f0444ffc937fa480e0425"></a><!-- doxytag: member="WebAppManager::getTimeZone" ref="ab73e76829c4f0444ffc937fa480e0425" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string <a class="el" href="classWebAppManager.htm#ab73e76829c4f0444ffc937fa480e0425">WebAppManager::getTimeZone</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Gets the time zone from the last time the clock was checked</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>System's current time zone. </dd></dl>

</div>
</div>
<a class="anchor" id="a9ada8029fb05c3bcbad5c47c1ad2e96e"></a><!-- doxytag: member="WebAppManager::globalProperties" ref="a9ada8029fb05c3bcbad5c47c1ad2e96e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structSharedGlobalProperties.htm">SharedGlobalProperties</a> * <a class="el" href="classWebAppManager.htm#a9ada8029fb05c3bcbad5c47c1ad2e96e">WebAppManager::globalProperties</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Unknown at this time.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000052">Todo:</a></b></dt><dd>Document this once <a class="el" href="structSharedGlobalProperties.htm">SharedGlobalProperties</a> is documented.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="structSharedGlobalProperties.htm">SharedGlobalProperties</a></dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Unknown at this time. </dd></dl>

</div>
</div>
<a class="anchor" id="ab85778ebfbe8ef55346d7408970e7f72"></a><!-- doxytag: member="WebAppManager::handleEvent" ref="ab85778ebfbe8ef55346d7408970e7f72" args="(sptr&lt; Event &gt;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#ab85778ebfbe8ef55346d7408970e7f72">WebAppManager::handleEvent</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt;&#160;</td>
          <td class="paramname"><em>e</em></td><td>)</td>
          <td><code> [protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Handles a GLib event from the event queue</p>
<p>Currently the only event we handle is <a class="el" href="classInputEvent.htm">InputEvent</a>, which is sent by us internally when <a class="el" href="classWebAppManager.htm#a28cb0f85080b116c6f3f4e2769d15dff">WebAppManager::inputEvent()</a> is called.</p>
<p>Doesn't appear to be used anymore.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000065">Todo:</a></b></dt><dd>See if the functionality of this can be removed along with <a class="el" href="classWebAppManager.htm#a28cb0f85080b116c6f3f4e2769d15dff">WebAppManager::inputEvent()</a>.</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">event</td><td>The event to handle. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classSyncTask.htm">SyncTask</a>.</p>

</div>
</div>
<a class="anchor" id="a7ae867c2d3e7b8262a5dea2ddf81643e"></a><!-- doxytag: member="WebAppManager::hasBeenInstanced" ref="a7ae867c2d3e7b8262a5dea2ddf81643e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classWebAppManager.htm#a7ae867c2d3e7b8262a5dea2ddf81643e">WebAppManager::hasBeenInstanced</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Checks whether or not a <a class="el" href="classWebAppManager.htm">WebAppManager</a> instance has been constructed for this process</p>
<p>Return value indicates whether or not <a class="el" href="classWebAppManager.htm#a23ddfa07ab71c971fd7b6b05e90456b5">WebAppManager::instance()</a> has been called yet for this process.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classWebAppManager.htm#a23ddfa07ab71c971fd7b6b05e90456b5">WebAppManager::instance()</a></dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Whether or not a <a class="el" href="classWebAppManager.htm">WebAppManager</a> instance has been constructed for this process. </dd></dl>

</div>
</div>
<a class="anchor" id="ae3b96cc5063ed260c2e3ea4df81319ce"></a><!-- doxytag: member="WebAppManager::initiateLunaStatsReporting" ref="ae3b96cc5063ed260c2e3ea4df81319ce" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#ae3b96cc5063ed260c2e3ea4df81319ce">WebAppManager::initiateLunaStatsReporting</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Sets up reporting of stats to Luna</p>
<p>Sets up a recurring time interval to report stats from Palm::MemStats::getJSON to Luna.</p>
<dl class="see"><dt><b>See also:</b></dt><dd>Palm::MemStats::getJSON() </dd></dl>

</div>
</div>
<a class="anchor" id="a28cb0f85080b116c6f3f4e2769d15dff"></a><!-- doxytag: member="WebAppManager::inputEvent" ref="a28cb0f85080b116c6f3f4e2769d15dff" args="(int ipcKey, sptr&lt; Event &gt; e)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a28cb0f85080b116c6f3f4e2769d15dff">WebAppManager::inputEvent</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classint.htm">int</a>&#160;</td>
          <td class="paramname"><em>ipcKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsptr.htm">sptr</a>&lt; <a class="el" href="classEvent.htm">Event</a> &gt;&#160;</td>
          <td class="paramname"><em>e</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Posts an event to the event queue to be dispatched to a given app</p>
<p>This used to be used by WebAppManager::onInputEvent(), but since that has been commented out, this is probably unnecessary to have around anymore.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000062">Todo:</a></b></dt><dd>Figure out if we should remove this and associated functionality.</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">ipcKey</td><td>IPC key of the app to dispatch the event to. </td></tr>
    <tr><td class="paramname">e</td><td><a class="el" href="classEvent.htm">Event</a> to dispatch. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0fe9c755fcb0ea48c31255a5cf9cef72"></a><!-- doxytag: member="WebAppManager::inSimulatedMouseEvent" ref="a0fe9c755fcb0ea48c31255a5cf9cef72" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classWebAppManager.htm#a0fe9c755fcb0ea48c31255a5cf9cef72">WebAppManager::inSimulatedMouseEvent</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Unknown at this time</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000054">Todo:</a></b></dt><dd><p class="startdd">See if this is actually used anywhere and for what. </p>
<p class="enddd">See if we can remove this.</p>
</dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Unknown at this time. </dd></dl>

</div>
</div>
<a class="anchor" id="a23ddfa07ab71c971fd7b6b05e90456b5"></a><!-- doxytag: member="WebAppManager::instance" ref="a23ddfa07ab71c971fd7b6b05e90456b5" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classWebAppManager.htm">WebAppManager</a> * <a class="el" href="classWebAppManager.htm#a23ddfa07ab71c971fd7b6b05e90456b5">WebAppManager::instance</a> </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Gets this process's <a class="el" href="classWebAppManager.htm">WebAppManager</a> instance</p>
<p><a class="el" href="classWebAppManager.htm">WebAppManager</a> is designed as a singleton and can only be constructed once per process. This method returns the allowed instance of <a class="el" href="classWebAppManager.htm">WebAppManager</a> for this process and constructs one if one has not yet been created.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>This process's instance of <a class="el" href="classWebAppManager.htm">WebAppManager</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="aaecf3c6d00a4eb7e0dbdedbcef92dd45"></a><!-- doxytag: member="WebAppManager::isDevicePortraitType" ref="aaecf3c6d00a4eb7e0dbdedbcef92dd45" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classWebAppManager.htm#aaecf3c6d00a4eb7e0dbdedbcef92dd45">WebAppManager::isDevicePortraitType</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Returns whether, in the current device orientation, the rotated screen is taller than wide</p>
<p>Checks to see, with the host device info structure and current orientation, if the screen is being held in such a way that the "vertical" direction is taller than the "horizontal" direction.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if the device is currently in a portrait orientation, false if in landscape mode. </dd></dl>

</div>
</div>
<a class="anchor" id="a83ddc54a146bd603138156a7fa1be192"></a><!-- doxytag: member="WebAppManager::markUniversalSearchReady" ref="a83ddc54a146bd603138156a7fa1be192" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a83ddc54a146bd603138156a7fa1be192">WebAppManager::markUniversalSearchReady</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Lets the bootup screen know that Universal Search is ready</p>
<p>The boot process waits until Universal Search is available before it considers itself "done". This lets it know that Universal Search is all set and ready to use.</p>
<dl class="see"><dt><b>See also:</b></dt><dd>WebAppManager::bootFinished() </dd></dl>

</div>
</div>
<a class="anchor" id="aaa3a65ee2f479d6c5978bb7b7ca31b29"></a><!-- doxytag: member="WebAppManager::monitorNativeProcessMemory" ref="aaa3a65ee2f479d6c5978bb7b7ca31b29" args="(const pid_t pid, const int maxMemory, pid_t updateFromPid=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#aaa3a65ee2f479d6c5978bb7b7ca31b29">WebAppManager::monitorNativeProcessMemory</a> </td>
          <td>(</td>
          <td class="paramtype">const pid_t&#160;</td>
          <td class="paramname"><em>pid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classint.htm">int</a>&#160;</td>
          <td class="paramname"><em>maxMemory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pid_t&#160;</td>
          <td class="paramname"><em>updateFromPid</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Missing implementation</p>
<p>Can't seem to find an implementation of this. Without that, it's unknown what this does.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pid</td><td>Unknown. </td></tr>
    <tr><td class="paramname">maxMemory</td><td>Unknown. </td></tr>
    <tr><td class="paramname">updateFromPid</td><td>Unknown. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2aa32a6d0b923ad414bec59df1e5638c"></a><!-- doxytag: member="WebAppManager::onDeleteHTML5Database" ref="a2aa32a6d0b923ad414bec59df1e5638c" args="(const std::string &amp;domain)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a2aa32a6d0b923ad414bec59df1e5638c">WebAppManager::onDeleteHTML5Database</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>domain</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Handles an IPC message asking us to delete all HTML5 localStorage data for a given domain</p>
<p>Since we're managing web apps, it's quite possible they will store data in localStorage. This IPC call gives other processes a canonical way to delete that.</p>
<p>Could be quite dangerous, actually, if this is exposed to non-system apps. At this point, it's unknown if that is the case or not.</p>
<dl class="see"><dt><b>See also:</b></dt><dd>Palm::WebGlobal::deleteDatabasesForDomain()</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000061">Todo:</a></b></dt><dd><p class="startdd">Confirm details of this once Palm::WebGlobal::deleteDatabasesForDomain() is publicly documented. </p>
<p class="enddd">Ensure this IPC call is not exposed to non-system apps.</p>
</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">domain</td><td>The domain to delete localStorage for. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a62dff3807ddd095c64fb93eed00f40e7"></a><!-- doxytag: member="WebAppManager::onDisconnected" ref="a62dff3807ddd095c64fb93eed00f40e7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a62dff3807ddd095c64fb93eed00f40e7">WebAppManager::onDisconnected</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Logs a message indicating that a remote server disconnected</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000044">Todo:</a></b></dt><dd><p class="startdd">Figure out the purpose for this. </p>
<p class="enddd">See if this can be removed entirely. </p>
</dd></dl>

</div>
</div>
<a class="anchor" id="a2032767b50971a79aee30e8545b105c8"></a><!-- doxytag: member="WebAppManager::onGlobalProperties" ref="a2032767b50971a79aee30e8545b105c8" args="(int key)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a2032767b50971a79aee30e8545b105c8">WebAppManager::onGlobalProperties</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classint.htm">int</a>&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Unknown at the moment</p>
<p>Both the purpose and function of this are currently unknown.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>Unknown. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afc255fb98cf5eb342430c9606ad9b86c"></a><!-- doxytag: member="WebAppManager::onInspectByProcessId" ref="afc255fb98cf5eb342430c9606ad9b86c" args="(const std::string &amp;processId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#afc255fb98cf5eb342430c9606ad9b86c">WebAppManager::onInspectByProcessId</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>processId</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Calls WebAppBase::inspect() for an app</p>
<p>Unknown exactly what the function of this is.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000057">Todo:</a></b></dt><dd>Document this fully once WebAppBase::inspect() is fully documented.</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">processId</td><td>Process ID of the app to inspect. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5c213b609e4b55d1a966b1ae6d4f2745"></a><!-- doxytag: member="WebAppManager::onKillApp" ref="a5c213b609e4b55d1a966b1ae6d4f2745" args="(const std::string &amp;appId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classWebAppManager.htm#a5c213b609e4b55d1a966b1ae6d4f2745">WebAppManager::onKillApp</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appId</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Handles an IPC message to close an app</p>
<p>Closes all instances of a given app in response to something else asking us (via InterProcess Communication message) to close an app.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">appId</td><td>App ID of the app to close. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if one or more instances of the given app were open and have now been closed or false if the app was not already open. </dd></dl>

</div>
</div>
<a class="anchor" id="aefe25b78f15639fe8499a24e12b98472"></a><!-- doxytag: member="WebAppManager::onLaunchUrl" ref="aefe25b78f15639fe8499a24e12b98472" args="(const std::string &amp;url, int winType, const std::string &amp;appDesc, const std::string &amp;procId, const std::string &amp;args, const std::string &amp;launchingAppId, const std::string &amp;launchingProcId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#aefe25b78f15639fe8499a24e12b98472">WebAppManager::onLaunchUrl</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classint.htm">int</a>&#160;</td>
          <td class="paramname"><em>winType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appDesc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>procId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>launchingAppId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>launchingProcId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Handle an IPC message asking us to open a URL</p>
<p>This method is run whenever the <a class="el" href="namespacePalm.htm">Palm</a> InterProcess Communication hands us a message from another process asking us to open a URL.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">url</td><td>URL to open. </td></tr>
    <tr><td class="paramname">winType</td><td>Type of window to open. </td></tr>
    <tr><td class="paramname">procId</td><td>Process ID to use for the new <a class="el" href="classWebPage.htm">WebPage</a> being opened. </td></tr>
    <tr><td class="paramname">launchingAppId</td><td>App ID of the app launching this URL. </td></tr>
    <tr><td class="paramname">launchingProcId</td><td>Process ID of the app launching this URL. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae19211f24d21f0c6d03f0cf549781a02"></a><!-- doxytag: member="WebAppManager::onLaunchUrlChild" ref="ae19211f24d21f0c6d03f0cf549781a02" args="(const std::string &amp;url, int winType, const std::string &amp;appDesc, const std::string &amp;procId, const std::string &amp;args, const std::string &amp;launchingAppId, const std::string &amp;launchingProcId, int &amp;errorCode, bool isHeadless)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#ae19211f24d21f0c6d03f0cf549781a02">WebAppManager::onLaunchUrlChild</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>url</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classint.htm">int</a>&#160;</td>
          <td class="paramname"><em>winType</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appDesc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>procId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>launchingAppId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>launchingProcId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classint.htm">int</a> &amp;&#160;</td>
          <td class="paramname"><em>errorCode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isHeadless</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Handle an IPC message asking us to launch a URL as a child window of another process</p>
<p>This method is run whenever the <a class="el" href="namespacePalm.htm">Palm</a> InterProcess Communication hands us a message from another process asking us to open a URL as a child of another window.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000055">Todo:</a></b></dt><dd>Document isHeadless parameter if we can find a reason for it to exist.</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">url</td><td>URL to open. </td></tr>
    <tr><td class="paramname">winType</td><td>Type of window to open. </td></tr>
    <tr><td class="paramname">procId</td><td>Process ID to use for the new <a class="el" href="classWebPage.htm">WebPage</a> being opened. </td></tr>
    <tr><td class="paramname">launchingAppId</td><td>App ID of the app launching this URL. </td></tr>
    <tr><td class="paramname">launchingProcId</td><td>Process ID of the app launching this URL. </td></tr>
    <tr><td class="paramname">errorCode</td><td>Variable (passed by reference) for this method to return an error code into if something goes wrong. </td></tr>
    <tr><td class="paramname">isHeadless</td><td>Ignored, at the moment. Purpose is currently unclear. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a29ddd3137b7b631e68980dcb5ec202c8"></a><!-- doxytag: member="WebAppManager::onListOfRunningAppsRequest" ref="a29ddd3137b7b631e68980dcb5ec202c8" args="(bool includeSysApps)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a29ddd3137b7b631e68980dcb5ec202c8">WebAppManager::onListOfRunningAppsRequest</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>includeSysApps</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Handles an IPC message asking for a list of all running processes</p>
<p>Sends back an IPC ViewHost_ListOfRunningAppsResponse with a single parameter - a JSON string laid out as follows:</p>
<div class="fragment"><pre class="fragment"> {
   running : [
       { <span class="keywordtype">id</span> : [App ID], processid : [Process ID] },
       ...
     ],
   returnValue : <span class="keyword">true</span>
 }
</pre></div><dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">includeSysApps</td><td>Whether or not to include system app processes (those without an app ID) in the list. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad79cd091e23671d6f1c7417701cf6194"></a><!-- doxytag: member="WebAppManager::onMessageReceived" ref="ad79cd091e23671d6f1c7417701cf6194" args="(const PIpcMessage &amp;msg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#ad79cd091e23671d6f1c7417701cf6194">WebAppManager::onMessageReceived</a> </td>
          <td>(</td>
          <td class="paramtype">const PIpcMessage &amp;&#160;</td>
          <td class="paramname"><em>msg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Dispatch an InterProcess Communication message to the correct spot</p>
<p>Dispatches an IPC message to an app or to one of the onSomething methods of this class depending on the type of message.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">msg</td><td>IPC message to process. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2c0ad973f79cc678d7d15f46aa7f3319"></a><!-- doxytag: member="WebAppManager::onProcMgrLaunch" ref="a2c0ad973f79cc678d7d15f46aa7f3319" args="(const std::string &amp;appDescString, const std::string &amp;params, const std::string &amp;launchingAppId, const std::string &amp;launchingProcId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a2c0ad973f79cc678d7d15f46aa7f3319">WebAppManager::onProcMgrLaunch</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appDescString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>launchingAppId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>launchingProcId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Handles an IPC message asking us to launch an app</p>
<p>Launches a web app given its App ID. Pretty simple. See <a class="el" href="classProcessManager.htm#ae5e68ee0cd6ca97bea2f3c8a7ae23e8c">ProcessManager::launch()</a> for more information (it's actually quite well-documented already.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classProcessManager.htm#ae5e68ee0cd6ca97bea2f3c8a7ae23e8c">ProcessManager::launch()</a></dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">appDescString</td><td>App ID of the web app to launch. </td></tr>
    <tr><td class="paramname">params</td><td>JSON launch parameters to pass to the new app. </td></tr>
    <tr><td class="paramname">launchingAppId</td><td>App ID of the app asking us to launch this new app. </td></tr>
    <tr><td class="paramname">launchingProcId</td><td>Process ID of the app asking us to launch this new app (can be NULL). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4f9d41308eca294b862002dee99af008"></a><!-- doxytag: member="WebAppManager::onProcMgrLaunchBootTimApp" ref="a4f9d41308eca294b862002dee99af008" args="(const std::string &amp;appDescString)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a4f9d41308eca294b862002dee99af008">WebAppManager::onProcMgrLaunchBootTimApp</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appDescString</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Appears to handles an IPC message asking us to launch a headless app at boot time</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classProcessManager.htm#a801cdb64ecc0667cf88e816c70864e65">ProcessManager::launchBootTimeApp()</a></dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000060">Todo:</a></b></dt><dd><p class="startdd">Document this more fully once <a class="el" href="classProcessManager.htm#a801cdb64ecc0667cf88e816c70864e65">ProcessManager::launchBootTimeApp()</a> is fully documented. </p>
<p class="enddd">Add the missing "e" into the name so it matches <a class="el" href="classProcessManager.htm">ProcessManager</a>.</p>
</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">appDescString</td><td>App ID of the app to launch. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad65fec6705513b7b6017c9ad0f99b02e"></a><!-- doxytag: member="WebAppManager::onProcMgrLaunchChild" ref="ad65fec6705513b7b6017c9ad0f99b02e" args="(const std::string &amp;appDescString, const std::string &amp;params, const std::string &amp;launchingAppId, const std::string &amp;launchingProcId, bool isHeadless, bool isParentPdk)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#ad65fec6705513b7b6017c9ad0f99b02e">WebAppManager::onProcMgrLaunchChild</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appDescString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>params</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>launchingAppId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>launchingProcId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isHeadless</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isParentPdk</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Handles an IPC message asking us to launch an app as a modal child of another app</p>
<p>Launches a web app given its App ID. Differs from <a class="el" href="classWebAppManager.htm#a2c0ad973f79cc678d7d15f46aa7f3319">WebAppManager::onProcMgrLaunch()</a> in that the new app is set up as a child of the given launching parent and is launched in a modal configuration where it must be dismissed in some way before returning to the parent.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classProcessManager.htm#a457d362aee14449aa3d722be4ebd01a2">ProcessManager::launchModal()</a></dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">appDescString</td><td>App ID of the web app to launch. </td></tr>
    <tr><td class="paramname">params</td><td>JSON launch parameters to pass to the new app. </td></tr>
    <tr><td class="paramname">launchingAppId</td><td>App ID of the app asking us to launch this new app. </td></tr>
    <tr><td class="paramname">launchingProcId</td><td>Process ID of the app asking us to launch this new app (can be NULL). </td></tr>
    <tr><td class="paramname">isHeadless</td><td>true to create an app with no visible window, false to create a modal child app. </td></tr>
    <tr><td class="paramname">isParentPdk</td><td>Pass in true if the parent is a PDK app instead of a web app, false otherwise. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2bba205dc03e2d17e7af9cf53e41ad1d"></a><!-- doxytag: member="WebAppManager::onRelaunchApp" ref="a2bba205dc03e2d17e7af9cf53e41ad1d" args="(const std::string &amp;procId, const std::string &amp;args, const std::string &amp;launchingAppId, const std::string &amp;launchingProcId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a2bba205dc03e2d17e7af9cf53e41ad1d">WebAppManager::onRelaunchApp</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>procId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>args</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>launchingAppId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>launchingProcId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Finds an app and relaunches it</p>
<p>Unsure at the moment why an app would need to be relaunched.</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000056">Todo:</a></b></dt><dd>Document this further once <a class="el" href="classWebAppBase.htm#a0aa6fc372e49d89d5cc051c698f82fbb">WebAppBase::relaunch()</a> is documented.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classWebAppBase.htm#a0aa6fc372e49d89d5cc051c698f82fbb">WebAppBase::relaunch()</a></dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">procId</td><td>Process ID of the app to relaunch. </td></tr>
    <tr><td class="paramname">args</td><td>Launch arguments to pass to the app when it relaunches. </td></tr>
    <tr><td class="paramname">launchingAppId</td><td>App ID of the app requesting the relaunch. </td></tr>
    <tr><td class="paramname">launchingProcId</td><td>Process ID of the app requesting the relaunch. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aed8d6836bb54bd168490750383724c52"></a><!-- doxytag: member="WebAppManager::onSetOrientation" ref="aed8d6836bb54bd168490750383724c52" args="(int orient)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#aed8d6836bb54bd168490750383724c52">WebAppManager::onSetOrientation</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classint.htm">int</a>&#160;</td>
          <td class="paramname"><em>orient</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Run when device orientation has changed</p>
<p>Lets all open WebApps know that "up" has changed direction and that their displays need to rotate to match the screen's direction.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">orient</td><td>New orientation - one of Event::Orientation_Up, Event::Orientation_Down, Event::Orientation_Left, Event::Orientation_Right. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6840696e9f54590ae548d810af636ec1"></a><!-- doxytag: member="WebAppManager::onShutdownEvent" ref="a6840696e9f54590ae548d810af636ec1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a6840696e9f54590ae548d810af636ec1">WebAppManager::onShutdownEvent</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Handles an IPC message to close all apps</p>
<p>If TARGET_DESKTOP is defined, this method deletes all open apps from memory then runs the garbage collector to clean up memory.</p>
<p>Either way, it then closes down the GLib main loop and returns. </p>

</div>
</div>
<a class="anchor" id="a8558dd09a6bc1c43980af07369e74506"></a><!-- doxytag: member="WebAppManager::onSuspendWebkitProcess" ref="a8558dd09a6bc1c43980af07369e74506" args="(bool *result)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a8558dd09a6bc1c43980af07369e74506">WebAppManager::onSuspendWebkitProcess</a> </td>
          <td>(</td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Handle an IPC message from the SysMgr process telling us our process is going to be suspended</p>
<p>The SysMgr process is suspending this process. As soon as we return from this function the process will be suspended.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">result</td><td>Variable to place a result into to return to the caller. Always set to true in our implementation. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a439c9272b9f1136981f725d325bedd47"></a><!-- doxytag: member="WebAppManager::onSyncKillApp" ref="a439c9272b9f1136981f725d325bedd47" args="(const std::string &amp;appId, bool *result)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a439c9272b9f1136981f725d325bedd47">WebAppManager::onSyncKillApp</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Handles an IPC message to close an app and notify the caller when done</p>
<p>Closes all instances of a given app in response to something else asking us (via InterProcess Communication message) to close an app.</p>
<p>Differs from <a class="el" href="classWebAppManager.htm#a5c213b609e4b55d1a966b1ae6d4f2745">WebAppManager::onKillApp()</a> in that this one returns a result back to the caller to let them know that, yes, we did close everything asked of us.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classWebAppManager.htm#a5c213b609e4b55d1a966b1ae6d4f2745">WebAppManager::onKillApp()</a></dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">appId</td><td>App ID of the app to close. </td></tr>
    <tr><td class="paramname">result</td><td>Where to store the result of closing apps. Value will be set to true if one or more instances of the given app were open and have now been closed or false if the app was not already open. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="affa9b5e9716c661c02577221f0dc0847"></a><!-- doxytag: member="WebAppManager::onUiDimensionsChanged" ref="affa9b5e9716c661c02577221f0dc0847" args="(int width, int height)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#affa9b5e9716c661c02577221f0dc0847">WebAppManager::onUiDimensionsChanged</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classint.htm">int</a>&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classint.htm">int</a>&#160;</td>
          <td class="paramname"><em>height</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Handle an IPC message telling us that output dimensions have changed</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000063">Todo:</a></b></dt><dd>Document this fully once we figure out what calls this so we can figure out what it's used for to figure out what it does.</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">width</td><td>New width. </td></tr>
    <tr><td class="paramname">height</td><td>New height. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af69923b9e5cc577cd398cad789256e5a"></a><!-- doxytag: member="WebAppManager::orientation" ref="af69923b9e5cc577cd398cad789256e5a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Event::Orientation <a class="el" href="classWebAppManager.htm#af69923b9e5cc577cd398cad789256e5a">WebAppManager::orientation</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Gets the device's current orientation</p>
<p>Returns which side of the display is currently facing up.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Current display orientation. </dd></dl>

</div>
</div>
<a class="anchor" id="a96189e68004ab307a6afa1c894fa1253"></a><!-- doxytag: member="WebAppManager::pastedFromClipboard" ref="a96189e68004ab307a6afa1c894fa1253" args="(const std::string &amp;appId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a96189e68004ab307a6afa1c894fa1253">WebAppManager::pastedFromClipboard</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appId</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Doesn't do anything</p>
<p>Doesn't do anything right now.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">appId</td><td>App ID of the app that pasted text from the clipboard. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af947cc35be552c65680fd07ae8b0068d"></a><!-- doxytag: member="WebAppManager::performLowMemoryActions" ref="af947cc35be552c65680fd07ae8b0068d" args="(const bool allowExpensive=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#af947cc35be552c65680fd07ae8b0068d">WebAppManager::performLowMemoryActions</a> </td>
          <td>(</td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>allowExpensive</em> = <code>false</code></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Ask <a class="el" href="classMemoryWatcher.htm">MemoryWatcher</a> and the main SysMgr process to perform low memory actions</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000058">Todo:</a></b></dt><dd>Document this fully once <a class="el" href="classMemoryWatcher.htm#a1125ca3afd0f3dd873be3aabb007d60a">MemoryWatcher::doLowMemActions()</a> and SysMgr's low memory actions are fully documented.</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">allowExpensive</td><td>Guessing this is whether or not to spend additional time to clean up memory due to running really low. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa2197dd384b1c7e31bedea92fd3cb906"></a><!-- doxytag: member="WebAppManager::reportAppClosed" ref="aa2197dd384b1c7e31bedea92fd3cb906" args="(const std::string &amp;appId, const std::string &amp;processId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#aa2197dd384b1c7e31bedea92fd3cb906">WebAppManager::reportAppClosed</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>processId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Reports to the Luna statistics service that an app has been closed</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000048">Todo:</a></b></dt><dd>Figure out where this is being used and document this in a bit more detail so we know why it's needed.</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">appId</td><td>App ID of the app which has been closed. </td></tr>
    <tr><td class="paramname">processId</td><td>Process ID of the app which has been closed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7637244516e4a8b61ad3d4abbf3fa4e6"></a><!-- doxytag: member="WebAppManager::reportAppLaunched" ref="a7637244516e4a8b61ad3d4abbf3fa4e6" args="(const std::string &amp;appId, const std::string &amp;processId)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a7637244516e4a8b61ad3d4abbf3fa4e6">WebAppManager::reportAppLaunched</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>appId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>processId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Reports to the Luna statistics service that an app has been launched</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000047">Todo:</a></b></dt><dd>Figure out where this is being used and document this in a bit more detail so we know why it's needed.</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">appId</td><td>App ID of the app which has been launched. </td></tr>
    <tr><td class="paramname">processId</td><td>Process ID of the app which has been launched. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a87036350d7f48562f6466b2ed78251b4"></a><!-- doxytag: member="WebAppManager::run" ref="a87036350d7f48562f6466b2ed78251b4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a87036350d7f48562f6466b2ed78251b4">WebAppManager::run</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Runs this task</p>
<p>The bulk of derived classes' funcionality should reside within this method. This method should not return until the task is complete. For example, <a class="el" href="classWebAppManager.htm">WebAppManager</a> runs a QCoreApplication within this method, and when it terminates, this function returns. </p>

<p>Reimplemented from <a class="el" href="classSyncTask.htm#a98f59db0f166b573d7822ca61462cfeb">SyncTask</a>.</p>

</div>
</div>
<a class="anchor" id="a54a96e6129c79e0ad2364849322b3533"></a><!-- doxytag: member="WebAppManager::runningApps" ref="a54a96e6129c79e0ad2364849322b3533" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; const <a class="el" href="classProcessBase.htm">ProcessBase</a> * &gt; <a class="el" href="classWebAppManager.htm#a54a96e6129c79e0ad2364849322b3533">WebAppManager::runningApps</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get a list of process information for all running web apps</p>
<p>This class manages web apps running on the system. It tracks all apps and stores information about them. This method returns system information about them, such as their process IDs.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>List of information about running web app processes. </dd></dl>

</div>
</div>
<a class="anchor" id="ad3d79811d4db58d3fcac0955a9fa199c"></a><!-- doxytag: member="WebAppManager::runningApps" ref="ad3d79811d4db58d3fcac0955a9fa199c" args="(Window::Type winType)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt; const <a class="el" href="classProcessBase.htm">ProcessBase</a> * &gt; <a class="el" href="classWebAppManager.htm#a54a96e6129c79e0ad2364849322b3533">WebAppManager::runningApps</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classWindow.htm#ad1e881db9a42ec6c27e7e4978912534d">Window::Type</a>&#160;</td>
          <td class="paramname"><em>winType</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get a list of process information for all running web apps filtered to only those of a certain type</p>
<p>This class manages web apps running on the system. It tracks all apps and stores information about them. This method returns system information about them, such as their process IDs, but only those of a given type.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">winType</td><td>Type of app to look for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>List of information about running web app processes of the requested type. </dd></dl>

</div>
</div>
<a class="anchor" id="a45bfba43fcd800ec15b39bbb86315c76"></a><!-- doxytag: member="WebAppManager::sendAsyncMessage" ref="a45bfba43fcd800ec15b39bbb86315c76" args="(PIpcMessage *msg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a45bfba43fcd800ec15b39bbb86315c76">WebAppManager::sendAsyncMessage</a> </td>
          <td>(</td>
          <td class="paramtype">PIpcMessage *&#160;</td>
          <td class="paramname"><em>msg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Sends an InterProcess Communication message</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000046">Todo:</a></b></dt><dd>Document this once <a class="el" href="classPIpcClient.htm">PIpcClient</a> and <a class="el" href="classPIpcChannelListener.htm">PIpcChannelListener</a> are publicly documented, since it appears this method uses functionality from one of them.</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">msg</td><td>IPC message to dispatch. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad964e91247693849907893557fef4083"></a><!-- doxytag: member="WebAppManager::setHostInfo" ref="ad964e91247693849907893557fef4083" args="(const HostInfo *hostInfo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const void <a class="el" href="classWebAppManager.htm#ad964e91247693849907893557fef4083">WebAppManager::setHostInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structHostInfo.htm">HostInfo</a> *&#160;</td>
          <td class="paramname"><em>hostInfo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Caches a version of the host device information structure</p>
<p>This structure contains information about the device that LunaSysMgr is running on, and is quite useful for checking what size the screen is. By caching it here, it doesn't have to be looked up every time it's used.</p>
<p>This can be retrieved from <a class="el" href="classHostBase.htm#ac0615bded33adf0ad86fda0f27b040c2">HostBase::instance()</a>-&gt;getInfo().</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classHostBase.htm#a8ced00bfde3ed358720ac3c5f31d5048">HostBase::getInfo()</a></dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">hostInfo</td><td>Host device info to cache. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5866bdb86479a3503f3527fed8e7e89f"></a><!-- doxytag: member="WebAppManager::setInSimulatedMouseEvent" ref="a5866bdb86479a3503f3527fed8e7e89f" args="(bool val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a5866bdb86479a3503f3527fed8e7e89f">WebAppManager::setInSimulatedMouseEvent</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Unknown at this time</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000053">Todo:</a></b></dt><dd><p class="startdd">See if this is actually used anywhere and for what. </p>
<p class="enddd">See if we can remove this.</p>
</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td>Unknown at this time. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a11b4bfea7c330d0e3020ac16069a560a"></a><!-- doxytag: member="WebAppManager::setJavascriptFlags" ref="a11b4bfea7c330d0e3020ac16069a560a" args="(const std::string &amp;flags)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a11b4bfea7c330d0e3020ac16069a560a">WebAppManager::setJavascriptFlags</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>flags</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Sets options in Palm::WebGlobal</p>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000045">Todo:</a></b></dt><dd>Document this once Palm::WebGlobal is publicly documented.</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">flags</td><td>Command-line-style flags to process (currently only --timeout_script_execution and --notimeout_script_execution seem to be specifically supported). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac6d5e66f626d13e5629ccedf8b9727ec"></a><!-- doxytag: member="WebAppManager::threadStarting" ref="ac6d5e66f626d13e5629ccedf8b9727ec" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#ac6d5e66f626d13e5629ccedf8b9727ec">WebAppManager::threadStarting</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Initializes <a class="el" href="classWebAppManager.htm">WebAppManager</a></p>
<p>Initializes the various components of <a class="el" href="classWebAppManager.htm">WebAppManager</a>:</p>
<ul>
<li>Reads in browser preferences from /etc/palm/browser.conf and /etc/palm/browser-platform.conf</li>
</ul>
<ul>
<li>Starts up <a class="el" href="classBackupManager.htm">BackupManager</a> and starts listening for events from it.</li>
</ul>
<ul>
<li>Disables the garbage collector for two minutes to give us a chance to start up first.</li>
</ul>
<ul>
<li>Disables JavaScript timeouts until after we're done booting.</li>
</ul>
<ul>
<li>Sets the system locale from the value in <a class="el" href="classPreferences.htm#a0e4294846b5741389a13e93d050208b4">Preferences::locale()</a>.</li>
</ul>
<ul>
<li>Starts <a class="el" href="classMemoryWatcher.htm">MemoryWatcher</a>.</li>
</ul>
<ul>
<li>Connects to the Luna statistics reporting service.</li>
</ul>
<ul>
<li>Asks Luna stats to call WebAppManager::systemServiceConnectCallback() when com.palm.systemservice changes status.</li>
</ul>
<ul>
<li>Asks Luna stats to call WebAppManager::displayManagerConnectCallback() when com.palm.display changes status.</li>
</ul>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000064">Todo:</a></b></dt><dd><p class="startdd">Figure out why this isn't just put into <a class="el" href="classWebAppManager.htm#a87036350d7f48562f6466b2ed78251b4">WebAppManager::run()</a>, since that appears to be the only place it's used, at least unless this class is derived from someplace. </p>
<p class="enddd">can locale change without restarting sysmgr? </p>
</dd></dl>

</div>
</div>
<a class="anchor" id="ae24c78fa19b8ba2ee4db84d156e9ca83"></a><!-- doxytag: member="WebAppManager::threadStopping" ref="ae24c78fa19b8ba2ee4db84d156e9ca83" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#ae24c78fa19b8ba2ee4db84d156e9ca83">WebAppManager::threadStopping</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Clean up <a class="el" href="classWebAppManager.htm">WebAppManager</a> as much as possible in preparation for having our thread stopped</p>
<p>Doesn't currently do anything. </p>

</div>
</div>
<a class="anchor" id="a8ea12e7350a476a80fc075f217bcb197"></a><!-- doxytag: member="WebAppManager::windowedAppAdded" ref="a8ea12e7350a476a80fc075f217bcb197" args="(WindowedWebApp *app)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a8ea12e7350a476a80fc075f217bcb197">WebAppManager::windowedAppAdded</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classWindowedWebApp.htm">WindowedWebApp</a> *&#160;</td>
          <td class="paramname"><em>app</em></td><td>)</td>
          <td><code> [protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Add an already-launched app to the group of apps we're managing</p>
<p>Used internally by WebAppManager::launchUrl() and WebAppManager::launchUrlChild().</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">app</td><td>New already-launched app to manage. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a81c7925f0bb7917633f010cb284623e3"></a><!-- doxytag: member="WebAppManager::windowedAppKeyChanged" ref="a81c7925f0bb7917633f010cb284623e3" args="(WindowedWebApp *app, int oldKey)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a81c7925f0bb7917633f010cb284623e3">WebAppManager::windowedAppKeyChanged</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classWindowedWebApp.htm">WindowedWebApp</a> *&#160;</td>
          <td class="paramname"><em>app</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classint.htm">int</a>&#160;</td>
          <td class="paramname"><em>oldKey</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Lets us know that an app's key has changed</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classWindowedWebApp.htm#a394a9f971980458b5018d4451bba6507">WindowedWebApp::getKey()</a></dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000066">Todo:</a></b></dt><dd>Document this more fully once <a class="el" href="classWindowedWebApp.htm#a394a9f971980458b5018d4451bba6507">WindowedWebApp::getKey()</a> is fully documented.</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">app</td><td>The app that changed keys. </td></tr>
    <tr><td class="paramname">oldKey</td><td>The key it used to use before the change. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a409179dea97cca3400e642d3eebbb037"></a><!-- doxytag: member="WebAppManager::windowedAppRemoved" ref="a409179dea97cca3400e642d3eebbb037" args="(WindowedWebApp *app)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classWebAppManager.htm#a409179dea97cca3400e642d3eebbb037">WebAppManager::windowedAppRemoved</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classWindowedWebApp.htm">WindowedWebApp</a> *&#160;</td>
          <td class="paramname"><em>app</em></td><td>)</td>
          <td><code> [protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Remove an app from the list of apps we're managing</p>
<p>Tells us not to manage an app anymore. Essentially just removes the tracking link between it and us.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">app</td><td>App that we should no longer manage. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="adf0accd1c50086338b2ac58012637639"></a><!-- doxytag: member="WebAppManager::AlertWebApp" ref="adf0accd1c50086338b2ac58012637639" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classAlertWebApp.htm">AlertWebApp</a><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aae1b23ca2095392f601c72e9777dd39d"></a><!-- doxytag: member="WebAppManager::CardWebApp" ref="aae1b23ca2095392f601c72e9777dd39d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classCardWebApp.htm">CardWebApp</a><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a66b64d915ff97a41c6847e109e61b419"></a><!-- doxytag: member="WebAppManager::DashboardWebApp" ref="a66b64d915ff97a41c6847e109e61b419" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classDashboardWebApp.htm">DashboardWebApp</a><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="af04fabd91189ed6162b4346d5564b37a"></a><!-- doxytag: member="WebAppManager::JsSysObject" ref="af04fabd91189ed6162b4346d5564b37a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classJsSysObject.htm">JsSysObject</a><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ace0bfd3a9d3b369ca160e1f7fc93fc9b"></a><!-- doxytag: member="WebAppManager::MemoryWatcher" ref="ace0bfd3a9d3b369ca160e1f7fc93fc9b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classMemoryWatcher.htm">MemoryWatcher</a><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ae1701c7594fe2cf1c96b951a52eb0396"></a><!-- doxytag: member="WebAppManager::ProcessManager" ref="ae1701c7594fe2cf1c96b951a52eb0396" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classProcessManager.htm">ProcessManager</a><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="adde74168d71d7bdbd1c678daff261c8e"></a><!-- doxytag: member="WebAppManager::WebAppBase" ref="adde74168d71d7bdbd1c678daff261c8e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classWebAppBase.htm">WebAppBase</a><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a2f57502cb2c89161e13ed7a91fc85596"></a><!-- doxytag: member="WebAppManager::WebPage" ref="a2f57502cb2c89161e13ed7a91fc85596" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classWebPage.htm">WebPage</a><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab9b68cba58a2091180367c2ca996f5ad"></a><!-- doxytag: member="WebAppManager::WindowedWebApp" ref="ab9b68cba58a2091180367c2ca996f5ad" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">friend class <a class="el" href="classWindowedWebApp.htm">WindowedWebApp</a><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="WebAppManager_8h_source.htm">WebAppManager.h</a></li>
<li><a class="el" href="WebAppManager_8cpp.htm">WebAppManager.cpp</a></li>
</ul>
</div><!-- contents -->
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Properties</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="classWebAppManager.htm">WebAppManager</a>      </li>

    <li class="footer">Generated on Tue Oct 2 2012 22:44:01 for LunaSysMgr by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
