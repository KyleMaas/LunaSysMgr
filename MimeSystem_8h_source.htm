<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>LunaSysMgr: MimeSystem.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">LunaSysMgr
   
   </div>
   
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
      <li><a href="dirs.htm"><span>Directories</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
      <li><a href="globals.htm"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MimeSystem_8h.htm','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">MimeSystem.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="MimeSystem_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* @@@LICENSE</span>
<a name="l00002"></a>00002 <span class="comment">*</span>
<a name="l00003"></a>00003 <span class="comment">*      Copyright (c) 2009-2012 Hewlett-Packard Development Company, L.P.</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span>
<a name="l00006"></a>00006 <span class="comment">* you may not use this file except in compliance with the License.</span>
<a name="l00007"></a>00007 <span class="comment">* You may obtain a copy of the License at</span>
<a name="l00008"></a>00008 <span class="comment">*</span>
<a name="l00009"></a>00009 <span class="comment">* http://www.apache.org/licenses/LICENSE-2.0</span>
<a name="l00010"></a>00010 <span class="comment">*</span>
<a name="l00011"></a>00011 <span class="comment">* Unless required by applicable law or agreed to in writing, software</span>
<a name="l00012"></a>00012 <span class="comment">* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
<a name="l00014"></a>00014 <span class="comment">* See the License for the specific language governing permissions and</span>
<a name="l00015"></a>00015 <span class="comment">* limitations under the License.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* LICENSE@@@ */</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef MIMESYSTEM_H_</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define MIMESYSTEM_H_</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &quot;<a class="code" href="Common_8h.htm">Common.h</a>&quot;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="Mutex_8h.htm">Mutex.h</a>&quot;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="CmdResourceHandlers_8h.htm">CmdResourceHandlers.h</a>&quot;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a><a class="code" href="classMimeSystem.htm">00036</a> <span class="keyword">class </span><a class="code" href="classMimeSystem.htm">MimeSystem</a>
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 <span class="keyword">public</span>:
<a name="l00039"></a>00039         
<a name="l00040"></a><a class="code" href="classMimeSystem_1_1VerbInfo.htm">00040</a>         <span class="keyword">class </span><a class="code" href="classMimeSystem_1_1VerbInfo.htm">VerbInfo</a> {
<a name="l00041"></a>00041         <span class="keyword">public</span>:
<a name="l00042"></a><a class="code" href="classMimeSystem_1_1VerbInfo.htm#a47e4ca083ab9bf6172029bad40646beb">00042</a>                 <a class="code" href="classMimeSystem_1_1VerbInfo.htm#a67568f12166ce9854f4a5734504b69b5">VerbInfo</a>(<span class="keyword">const</span> std::string&amp; verb,<span class="keyword">const</span> std::string&amp; params,<span class="keyword">const</span> std::string handlerAppId, uint32_t handlerIndex) :
<a name="l00043"></a>00043                         <a class="code" href="classMimeSystem_1_1VerbInfo.htm#a5014e8689baccc72df35a66f6ec34ffb">m_verb</a>(verb) , <a class="code" href="classMimeSystem_1_1VerbInfo.htm#aab1a472a7b35e8c587df143088147e6b">m_params</a>(params) , <a class="code" href="classMimeSystem_1_1VerbInfo.htm#ae55e259f30ceec5a065173809567e185">m_handlerAppId</a>(handlerAppId) , <a class="code" href="classMimeSystem_1_1VerbInfo.htm#a0659dd500e764d3184d1408cc571b738">m_handlerIndex</a>(handlerIndex) , <a class="code" href="classMimeSystem_1_1VerbInfo.htm#ad4da58d78d87d858328d8d7816593374">m_valid</a>(true) {}
<a name="l00044"></a><a class="code" href="classMimeSystem_1_1VerbInfo.htm#a67568f12166ce9854f4a5734504b69b5">00044</a>                 <a class="code" href="classMimeSystem_1_1VerbInfo.htm#a67568f12166ce9854f4a5734504b69b5">VerbInfo</a>() : <a class="code" href="classMimeSystem_1_1VerbInfo.htm#a5014e8689baccc72df35a66f6ec34ffb">m_verb</a>(<span class="stringliteral">&quot;&quot;</span>) , <a class="code" href="classMimeSystem_1_1VerbInfo.htm#aab1a472a7b35e8c587df143088147e6b">m_params</a>(<span class="stringliteral">&quot;&quot;</span>) , <a class="code" href="classMimeSystem_1_1VerbInfo.htm#ae55e259f30ceec5a065173809567e185">m_handlerAppId</a>(<span class="stringliteral">&quot;&quot;</span>) ,  <a class="code" href="classMimeSystem_1_1VerbInfo.htm#a0659dd500e764d3184d1408cc571b738">m_handlerIndex</a>(0) , <a class="code" href="classMimeSystem_1_1VerbInfo.htm#ad4da58d78d87d858328d8d7816593374">m_valid</a>(false) {}
<a name="l00045"></a><a class="code" href="classMimeSystem_1_1VerbInfo.htm#ac2000623dfe8539f9e2739fd3a5ec251">00045</a>                 <a class="code" href="classMimeSystem_1_1VerbInfo.htm#ac2000623dfe8539f9e2739fd3a5ec251">VerbInfo</a>(<span class="keyword">const</span> <a class="code" href="classMimeSystem_1_1VerbInfo.htm">VerbInfo</a>&amp; c) {
<a name="l00046"></a>00046                         <a class="code" href="classMimeSystem_1_1VerbInfo.htm#ad4da58d78d87d858328d8d7816593374">m_valid</a> = c.<a class="code" href="classMimeSystem_1_1VerbInfo.htm#ad4da58d78d87d858328d8d7816593374">m_valid</a>;
<a name="l00047"></a>00047                         <a class="code" href="classMimeSystem_1_1VerbInfo.htm#ae55e259f30ceec5a065173809567e185">m_handlerAppId</a> = c.<a class="code" href="classMimeSystem_1_1VerbInfo.htm#ae55e259f30ceec5a065173809567e185">m_handlerAppId</a>;
<a name="l00048"></a>00048                         <a class="code" href="classMimeSystem_1_1VerbInfo.htm#a0659dd500e764d3184d1408cc571b738">m_handlerIndex</a> = c.<a class="code" href="classMimeSystem_1_1VerbInfo.htm#a0659dd500e764d3184d1408cc571b738">m_handlerIndex</a>;
<a name="l00049"></a>00049                         <a class="code" href="classMimeSystem_1_1VerbInfo.htm#a5014e8689baccc72df35a66f6ec34ffb">m_verb</a> = c.<a class="code" href="classMimeSystem_1_1VerbInfo.htm#a5014e8689baccc72df35a66f6ec34ffb">m_verb</a>;
<a name="l00050"></a>00050                         <a class="code" href="classMimeSystem_1_1VerbInfo.htm#aab1a472a7b35e8c587df143088147e6b">m_params</a> = c.<a class="code" href="classMimeSystem_1_1VerbInfo.htm#aab1a472a7b35e8c587df143088147e6b">m_params</a>;
<a name="l00051"></a>00051                 }
<a name="l00052"></a>00052 
<a name="l00053"></a><a class="code" href="classMimeSystem_1_1VerbInfo.htm#aafe9b306568ea8c00d8f457a681a6e96">00053</a>                 <a class="code" href="classMimeSystem_1_1VerbInfo.htm">VerbInfo</a>&amp; <a class="code" href="classMimeSystem_1_1VerbInfo.htm#aafe9b306568ea8c00d8f457a681a6e96">operator=</a>(<span class="keyword">const</span> <a class="code" href="classMimeSystem_1_1VerbInfo.htm">VerbInfo</a>&amp; c) {
<a name="l00054"></a>00054                         <span class="keywordflow">if</span> (&amp;c == <span class="keyword">this</span>)
<a name="l00055"></a>00055                                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057                         <a class="code" href="classMimeSystem_1_1VerbInfo.htm#ad4da58d78d87d858328d8d7816593374">m_valid</a> = c.<a class="code" href="classMimeSystem_1_1VerbInfo.htm#ad4da58d78d87d858328d8d7816593374">m_valid</a>;
<a name="l00058"></a>00058                         <a class="code" href="classMimeSystem_1_1VerbInfo.htm#ae55e259f30ceec5a065173809567e185">m_handlerAppId</a> = c.<a class="code" href="classMimeSystem_1_1VerbInfo.htm#ae55e259f30ceec5a065173809567e185">m_handlerAppId</a>;
<a name="l00059"></a>00059                         <a class="code" href="classMimeSystem_1_1VerbInfo.htm#a0659dd500e764d3184d1408cc571b738">m_handlerIndex</a> = c.<a class="code" href="classMimeSystem_1_1VerbInfo.htm#a0659dd500e764d3184d1408cc571b738">m_handlerIndex</a>;
<a name="l00060"></a>00060                         <a class="code" href="classMimeSystem_1_1VerbInfo.htm#a5014e8689baccc72df35a66f6ec34ffb">m_verb</a> = c.<a class="code" href="classMimeSystem_1_1VerbInfo.htm#a5014e8689baccc72df35a66f6ec34ffb">m_verb</a>;
<a name="l00061"></a>00061                         <a class="code" href="classMimeSystem_1_1VerbInfo.htm#aab1a472a7b35e8c587df143088147e6b">m_params</a> = c.<a class="code" href="classMimeSystem_1_1VerbInfo.htm#aab1a472a7b35e8c587df143088147e6b">m_params</a>;
<a name="l00062"></a>00062                         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00063"></a>00063                 }
<a name="l00064"></a>00064 
<a name="l00065"></a><a class="code" href="classMimeSystem_1_1VerbInfo.htm#a5014e8689baccc72df35a66f6ec34ffb">00065</a>                 std::string <a class="code" href="classMimeSystem_1_1VerbInfo.htm#a5014e8689baccc72df35a66f6ec34ffb">m_verb</a>;
<a name="l00066"></a><a class="code" href="classMimeSystem_1_1VerbInfo.htm#aab1a472a7b35e8c587df143088147e6b">00066</a>                 std::string <a class="code" href="classMimeSystem_1_1VerbInfo.htm#aab1a472a7b35e8c587df143088147e6b">m_params</a>;
<a name="l00067"></a><a class="code" href="classMimeSystem_1_1VerbInfo.htm#ae55e259f30ceec5a065173809567e185">00067</a>                 std::string <a class="code" href="classMimeSystem_1_1VerbInfo.htm#ae55e259f30ceec5a065173809567e185">m_handlerAppId</a>;
<a name="l00068"></a><a class="code" href="classMimeSystem_1_1VerbInfo.htm#a0659dd500e764d3184d1408cc571b738">00068</a>                 uint32_t <a class="code" href="classMimeSystem_1_1VerbInfo.htm#a0659dd500e764d3184d1408cc571b738">m_handlerIndex</a>;
<a name="l00069"></a><a class="code" href="classMimeSystem_1_1VerbInfo.htm#ad4da58d78d87d858328d8d7816593374">00069</a>                 <span class="keywordtype">bool</span> <a class="code" href="classMimeSystem_1_1VerbInfo.htm#ad4da58d78d87d858328d8d7816593374">m_valid</a>;
<a name="l00070"></a>00070         
<a name="l00071"></a>00071         };
<a name="l00072"></a>00072         
<a name="l00073"></a>00073 <span class="keyword">public</span>:
<a name="l00074"></a>00074         
<a name="l00075"></a>00075         <span class="keyword">static</span> <a class="code" href="classMimeSystem.htm">MimeSystem</a> * <a class="code" href="classMimeSystem.htm#a95a3192d5d1ca7ddc3127ac6096d1822">instance</a>();
<a name="l00076"></a>00076         <span class="keyword">static</span> <a class="code" href="classMimeSystem.htm">MimeSystem</a> * <a class="code" href="classMimeSystem.htm#a95a3192d5d1ca7ddc3127ac6096d1822">instance</a>(<span class="keyword">const</span> std::string&amp; baseConfigFile);
<a name="l00077"></a>00077         <span class="keyword">static</span> <a class="code" href="classMimeSystem.htm">MimeSystem</a> * <a class="code" href="classMimeSystem.htm#a95a3192d5d1ca7ddc3127ac6096d1822">instance</a>(<span class="keyword">const</span> std::string&amp; baseConfigFile,<span class="keyword">const</span> std::string&amp; customizedConfigFile);
<a name="l00078"></a>00078         
<a name="l00079"></a>00079         std::string                     <a class="code" href="classMimeSystem.htm#a9998493fd486a1c4adb3a136cadc6a0d">getActiveAppIdForResource</a>(std::string mimeType);
<a name="l00080"></a>00080         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#a010181f128896611421d921c4c4bb66e">getAllAppIdForResource</a>(std::string mimeType,std::string&amp; r_active,std::vector&lt;std::string&gt;&amp; r_handlerAppIds);
<a name="l00081"></a>00081         
<a name="l00082"></a>00082         <a class="code" href="classResourceHandler.htm">ResourceHandler</a>         <a class="code" href="classMimeSystem.htm#ae328beafeca454c9f5bdc7cd6abe1911">getActiveHandlerForResource</a>(std::string mimeType);
<a name="l00083"></a>00083         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#a9181832753c9025d79aed9116880a2d7">getAllHandlersForResource</a>(std::string mimeType,<a class="code" href="classResourceHandler.htm">ResourceHandler</a>&amp; r_active,std::vector&lt;ResourceHandler&gt;&amp; r_handlers);
<a name="l00084"></a>00084                 
<a name="l00085"></a>00085         std::string                     <a class="code" href="classMimeSystem.htm#acfd9f6577b191231e1b5cf1edde6a649">getActiveAppIdForRedirect</a>(<span class="keyword">const</span> std::string&amp; url,<span class="keywordtype">bool</span> doNotUseRegexpMatch,<span class="keywordtype">bool</span> disallowSchemeForms);
<a name="l00086"></a>00086         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#a6fb2a84d85b14c5b67322b65f71725bd">getAllAppIdForRedirect</a>(<span class="keyword">const</span> std::string&amp; url,<span class="keywordtype">bool</span> doNotUseRegexpMatch,std::string&amp; r_active,std::vector&lt;std::string&gt;&amp; r_handlerAppIds);
<a name="l00087"></a>00087         
<a name="l00088"></a>00088         <a class="code" href="classRedirectHandler.htm">RedirectHandler</a>         <a class="code" href="classMimeSystem.htm#ada1492d7d491c4e136ae15572e9ae9bb">getActiveHandlerForRedirect</a>(<span class="keyword">const</span> std::string&amp; url,<span class="keywordtype">bool</span> doNotUseRegexpMatch,<span class="keywordtype">bool</span> disallowSchemeForms);
<a name="l00089"></a>00089         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#affc4c6abb07673ee188e799e22098511">getAllHandlersForRedirect</a>(<span class="keyword">const</span> std::string&amp; url,<span class="keywordtype">bool</span> doNotUseRegexpMatch,<a class="code" href="classRedirectHandler.htm">RedirectHandler</a>&amp; r_active,std::vector&lt;RedirectHandler&gt;&amp; r_handlers);
<a name="l00090"></a>00090                 
<a name="l00091"></a>00091         std::string                     <a class="code" href="classMimeSystem.htm#ae69c4ee1f435d47198c27bc3bce42c0c">getAppIdByVerbForResource</a>(std::string mimeType,<span class="keyword">const</span> std::string&amp; verb,std::string&amp; r_params,uint32_t&amp; r_index);
<a name="l00092"></a>00092         <a class="code" href="classResourceHandler.htm">ResourceHandler</a>         <a class="code" href="classMimeSystem.htm#a268afbc837dec899b8224fde7f354691">getHandlerByVerbForResource</a>(std::string mimeType,<span class="keyword">const</span> std::string&amp; verb);
<a name="l00093"></a>00093         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#a6da46bdc2f73412a5eb097724aeba62c">getAllHandlersByVerbForResource</a>(std::string mimeType,<span class="keyword">const</span> std::string&amp; verb,std::vector&lt;ResourceHandler&gt;&amp; r_handlers);
<a name="l00094"></a>00094         <span class="keywordtype">int</span>                             <a class="code" href="classMimeSystem.htm#ac50fb14235e6d541487b8883175db3e2">getAllAppIdByVerbForResource</a>(std::string mimeType,<span class="keyword">const</span> std::string&amp; verb,std::vector&lt;VerbInfo&gt;&amp; r_handlers);
<a name="l00095"></a>00095         
<a name="l00096"></a>00096         std::string                     <a class="code" href="classMimeSystem.htm#a0696f15ffddd20409e1d537487ee05b5">getAppIdByVerbForRedirect</a>(<span class="keyword">const</span> std::string&amp; url,<span class="keywordtype">bool</span> disallowSchemeForms,<span class="keyword">const</span> std::string&amp; verb,std::string&amp; r_params,uint32_t&amp; r_index);
<a name="l00097"></a>00097         <a class="code" href="classRedirectHandler.htm">RedirectHandler</a>         <a class="code" href="classMimeSystem.htm#a64f94b72110e7a016dd062806e7c3da6">getHandlerByVerbForRedirect</a>(<span class="keyword">const</span> std::string&amp; url,<span class="keywordtype">bool</span> disallowSchemeForms,<span class="keyword">const</span> std::string&amp; verb);
<a name="l00098"></a>00098         <span class="keywordtype">int</span>                             <a class="code" href="classMimeSystem.htm#a2dd7472f894e2ca85a8382c4be5c54d9">getAllHandlersByVerbForRedirect</a>(<span class="keyword">const</span> std::string&amp; url,<span class="keyword">const</span> std::string&amp; verb,std::vector&lt;RedirectHandler&gt;&amp; r_handlers);
<a name="l00099"></a>00099         <span class="keywordtype">int</span>                             <a class="code" href="classMimeSystem.htm#a2e7efbbe41c08706a638a03bad224365">getAllAppIdByVerbForRedirect</a>(<span class="keyword">const</span> std::string&amp; url,<span class="keyword">const</span> std::string&amp; verb,std::vector&lt;VerbInfo&gt;&amp; r_handlers);
<a name="l00100"></a>00100         
<a name="l00101"></a>00101         <a class="code" href="classRedirectHandler.htm">RedirectHandler</a>         <a class="code" href="classMimeSystem.htm#a07f575adb13ca685b25c614243db3e6a">getRedirectHandlerDirect</a>(<span class="keyword">const</span> uint32_t index);
<a name="l00102"></a>00102         <a class="code" href="classResourceHandler.htm">ResourceHandler</a>         <a class="code" href="classMimeSystem.htm#a645fdf7c970a1db5089aaf64edc0b29d">getResourceHandlerDirect</a>(<span class="keyword">const</span> uint32_t index);
<a name="l00103"></a>00103         
<a name="l00104"></a>00104         <span class="keywordtype">int</span>                             <a class="code" href="classMimeSystem.htm#a89ea9a76336ee4ce3a5550b748da8fd0">removeAllForAppId</a>(<span class="keyword">const</span> std::string&amp; appId);
<a name="l00105"></a>00105         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#ab99a5833f1d02e0d9c34f4454578f6b5">removeAllForMimeType</a>(std::string mimeType);
<a name="l00106"></a>00106         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#ad5dba16baaf0a0e93313dc52a9310a4c">removeAllForUrl</a>(<span class="keyword">const</span> std::string&amp; url);
<a name="l00107"></a>00107         
<a name="l00108"></a>00108         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#ab96c435e7e6d2630cc0127667c8e9134">addResourceHandler</a>(std::string&amp; extension,std::string mimeType,<span class="keywordtype">bool</span> shouldDownload,<span class="keyword">const</span> std::string appId,<span class="keyword">const</span> std::map&lt;std::string,std::string&gt; * pVerbs,<span class="keywordtype">bool</span> sysDefault);
<a name="l00109"></a>00109         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#ab96c435e7e6d2630cc0127667c8e9134">addResourceHandler</a>(std::string extension,<span class="keywordtype">bool</span> shouldDownload,<span class="keyword">const</span> std::string appId,<span class="keyword">const</span> std::map&lt;std::string,std::string&gt; * pVerbs,<span class="keywordtype">bool</span> sysDefault);
<a name="l00110"></a>00110         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#ab8b0367b515aa9ec8b312417cbfe6757">addRedirectHandler</a>(<span class="keyword">const</span> std::string&amp; url,<span class="keyword">const</span> std::string appId,<span class="keyword">const</span> std::map&lt;std::string,std::string&gt; * pVerbs,<span class="keywordtype">bool</span> isSchemeForm,<span class="keywordtype">bool</span> sysDefault);
<a name="l00111"></a>00111         
<a name="l00112"></a>00112         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#a52b2e93f10ca54234ecf5fede538b632">addVerbsToResourceHandler</a>(std::string mimeType,<span class="keyword">const</span> std::string&amp; appId,<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;&amp; verbs);
<a name="l00113"></a>00113         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#a4a5fe5381be46391eb2a5862db1368f0">addVerbsToRedirectHandler</a>(<span class="keyword">const</span> std::string&amp; url,<span class="keyword">const</span> std::string&amp; appId,<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;&amp; verbs);
<a name="l00114"></a>00114         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#a65d0f06c1b6ddcd722fa2891b030daf7">addVerbsDirect</a>(uint32_t index,<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;&amp; verbs);
<a name="l00115"></a>00115         
<a name="l00116"></a>00116         <span class="keywordtype">int</span>                             <a class="code" href="classMimeSystem.htm#acedd789b3811923702068708a3edfc09">swapResourceHandler</a>(std::string mimeType, uint32_t index);
<a name="l00117"></a>00117         <span class="keywordtype">int</span>                                     <a class="code" href="classMimeSystem.htm#a3ce2743a69f35d0fb06949f962fb1fbd">swapRedirectHandler</a>(<span class="keyword">const</span> std::string&amp; url, uint32_t index);
<a name="l00118"></a>00118         
<a name="l00119"></a>00119         <span class="keyword">static</span> <span class="keywordtype">bool</span>             <a class="code" href="classMimeSystem.htm#a75f5bc3c920b97eacd57356775c1771c">getExtensionFromUrl</a>(<span class="keyword">const</span> std::string&amp; url,std::string&amp; r_extn);
<a name="l00120"></a>00120         <span class="keywordtype">bool</span>                            <a class="code" href="classMimeSystem.htm#ad275b928de6785aea8a62efe37810fa5">getMimeTypeByExtension</a>(std::string extension,std::string&amp; r_mimeType);
<a name="l00121"></a>00121         
<a name="l00122"></a>00122         <span class="keyword">static</span> uint32_t         <a class="code" href="classMimeSystem.htm#a6b15a0659bfd23555c2810d083eb5161">assignIndex</a>();
<a name="l00123"></a>00123         <span class="keyword">static</span> uint32_t         <a class="code" href="classMimeSystem.htm#aa6a874394252cd6844479113f67de92d">getLastAssignedIndex</a>();
<a name="l00124"></a>00124         <span class="keyword">static</span> std::string      <a class="code" href="classMimeSystem.htm#aedb64c9533ad09ab2d6505e4e73dcff1">makePseudoExtensionFromMime</a>(<span class="keyword">const</span> std::string&amp; mimeType);
<a name="l00125"></a>00125         
<a name="l00126"></a>00126         std::string                     <a class="code" href="classMimeSystem.htm#aa567d55bce0ff200166cb378f1056b28">allTablesAsJsonString</a>();
<a name="l00127"></a>00127         std::string                     <a class="code" href="classMimeSystem.htm#a9d93fc18d09c57ebb54e9ac3f120c52f">resourceTableAsJsonString</a>();
<a name="l00128"></a>00128         json_object *           <a class="code" href="classMimeSystem.htm#a6a699769c362999f175d9eeaf11bf8c0">resourceTableAsJson</a>();  <span class="comment">//WARNING: memory allocated; caller must clean</span>
<a name="l00129"></a>00129         json_object *           <a class="code" href="classMimeSystem.htm#aa235804e1fa27be99c69e3ba02adb8d6">resourceTableAsJsonArray</a>();     <span class="comment">//WARNING: memory allocated; caller must clean</span>
<a name="l00130"></a>00130         
<a name="l00131"></a>00131         std::string                     <a class="code" href="classMimeSystem.htm#a2a1e43babf9e4f1971031d50ecd505c7">redirectTableAsJsonString</a>();
<a name="l00132"></a>00132         json_object *           <a class="code" href="classMimeSystem.htm#ab3ff62acbdb88fa789a3ae6ff3f2b3fd">redirectTableAsJson</a>();  <span class="comment">//WARNING: memory allocated; caller must clean</span>
<a name="l00133"></a>00133         json_object *           <a class="code" href="classMimeSystem.htm#af0c41ab50d9b40ce2f7b643ff561a235">redirectTableAsJsonArray</a>();     <span class="comment">//WARNING: memory allocated; caller must clean</span>
<a name="l00134"></a>00134         
<a name="l00135"></a>00135         std::string                     <a class="code" href="classMimeSystem.htm#a54ddaa3862a7e637695d961c7245b4d4">extensionMapAsJsonString</a>();
<a name="l00136"></a>00136         json_object *           <a class="code" href="classMimeSystem.htm#a04092507a60032b1b59b6887ed6304c6">extensionMapAsJson</a>();   <span class="comment">//WARNING: memory allocated; caller must clean</span>
<a name="l00137"></a>00137         json_object *           <a class="code" href="classMimeSystem.htm#a003db98fbc13d7430290819c1e671f95">extensionMapAsJsonArray</a>();      <span class="comment">//WARNING: memory allocated; caller must clean</span>
<a name="l00138"></a>00138                 
<a name="l00139"></a>00139         <span class="keywordtype">bool</span>                            <a class="code" href="classMimeSystem.htm#a792ddf53e55dde6629dfe813a342cc73">saveMimeTable</a>(<span class="keyword">const</span> std::string&amp; file,std::string&amp; r_err);
<a name="l00140"></a>00140         <span class="keywordtype">bool</span>                            <a class="code" href="classMimeSystem.htm#a31ff9f83c34255f1889e36f3b92800d0">saveMimeTableToActiveFile</a>(std::string&amp; r_err);
<a name="l00141"></a>00141         <span class="keywordtype">bool</span>                            <a class="code" href="classMimeSystem.htm#a391ad1ed855523ee4203f676a0643d07">restoreMimeTable</a>(<span class="keyword">const</span> std::string&amp; file,std::string&amp; r_err);
<a name="l00142"></a>00142         <span class="keywordtype">bool</span>                            <a class="code" href="classMimeSystem.htm#a391ad1ed855523ee4203f676a0643d07">restoreMimeTable</a>(json_object * source,std::string&amp; r_err);                      <span class="comment">//a version of restore that takes a read-in version of the file as a json obj.</span>
<a name="l00143"></a>00143         <span class="keywordtype">bool</span>                            <a class="code" href="classMimeSystem.htm#a4739a4b3f310162360bab0bbd9c5e593">clearMimeTable</a>();
<a name="l00144"></a>00144         <span class="keyword">static</span> <span class="keywordtype">void</span>                     <a class="code" href="classMimeSystem.htm#aac9903296665d9c4e1524facacc7307c">deleteSavedMimeTable</a>();                         
<a name="l00145"></a>00145         
<a name="l00146"></a>00146         <span class="comment">//some utils</span>
<a name="l00147"></a>00147         <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classMimeSystem.htm#a26c9ebaa1b572c30289a51dbfffe44d5">extractVerbsFromHandlerEntryJson</a>(<span class="keyword">struct</span> json_object * jsonHandlerEntry,std::map&lt;std::string,std::string&gt;&amp; r_verbs);
<a name="l00148"></a>00148         <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classMimeSystem.htm#a7ab5303e53da562b318a7b8f6c939982">extractVerbsFromHandlerNodeEntryJson</a>(<span class="keyword">struct</span> json_object * jsonHandlerNodeEntry,std::map&lt;std::string,uint32_t&gt;&amp; r_verbs);
<a name="l00149"></a>00149                 
<a name="l00150"></a>00150 <span class="keyword">private</span>:
<a name="l00151"></a>00151         
<a name="l00152"></a>00152         <a class="code" href="classMimeSystem.htm">MimeSystem</a>();
<a name="l00153"></a>00153         <a class="code" href="classMimeSystem.htm">MimeSystem</a>(<span class="keyword">const</span> <a class="code" href="classMimeSystem.htm">MimeSystem</a>&amp; c) {}
<a name="l00154"></a>00154         <a class="code" href="classMimeSystem.htm">MimeSystem</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classMimeSystem.htm">MimeSystem</a>&amp; c) { <span class="keywordflow">return</span> *<span class="keyword">this</span>;}
<a name="l00155"></a>00155         <span class="keyword">virtual</span> ~<a class="code" href="classMimeSystem.htm">MimeSystem</a>();
<a name="l00156"></a>00156         <span class="keywordtype">void</span> destroy();
<a name="l00157"></a>00157         
<a name="l00158"></a>00158         <span class="keywordtype">int</span> populateFromJson(<span class="keyword">struct</span> json_object * jobj);                <span class="comment">//useful only for the initial command-resource-handlers.json file reading</span>
<a name="l00159"></a>00159         
<a name="l00161"></a>00161         
<a name="l00162"></a>00162         <span class="keyword">class </span>VerbCacheEntry {
<a name="l00163"></a>00163         <span class="keyword">public</span>:
<a name="l00164"></a>00164                 
<a name="l00165"></a>00165                 VerbCacheEntry() : activeIndex(0) , useCount(0) {}
<a name="l00166"></a>00166                 VerbCacheEntry(uint32_t index) : activeIndex(index) , useCount(1) {}
<a name="l00167"></a>00167                 VerbCacheEntry(<span class="keyword">const</span> VerbCacheEntry&amp; c) : activeIndex(c.activeIndex) , useCount(c.useCount) {}
<a name="l00168"></a>00168                 VerbCacheEntry&amp; operator=(<span class="keyword">const</span> VerbCacheEntry&amp; c) {
<a name="l00169"></a>00169                         <span class="keywordflow">if</span> (<span class="keyword">this</span> == &amp;c)
<a name="l00170"></a>00170                                 <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00171"></a>00171                         activeIndex = c.activeIndex;
<a name="l00172"></a>00172                         useCount = c.useCount;
<a name="l00173"></a>00173                         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00174"></a>00174                 }
<a name="l00175"></a>00175                 uint32_t activeIndex;
<a name="l00176"></a>00176                 uint32_t useCount;
<a name="l00177"></a>00177         };
<a name="l00178"></a>00178         
<a name="l00179"></a>00179         <span class="keyword">class </span>RedirectHandlerNode {
<a name="l00180"></a>00180         <span class="keyword">public</span>:
<a name="l00181"></a>00181                 RedirectHandlerNode(<span class="keyword">const</span> std::string&amp; urlRe, <span class="keyword">const</span> std::string&amp; appId , <span class="keywordtype">bool</span> schemeForm) : m_redirectHandler(urlRe,appId,schemeForm) {
<a name="l00182"></a>00182                         m_handlersByIndex[m_redirectHandler.index()] = &amp;m_redirectHandler;
<a name="l00183"></a>00183                 }
<a name="l00184"></a>00184                 <a class="code" href="classRedirectHandler.htm">RedirectHandler</a> m_redirectHandler;
<a name="l00185"></a>00185                 std::vector&lt;RedirectHandler *&gt; m_alternates;
<a name="l00186"></a>00186         
<a name="l00187"></a>00187                 std::map&lt;std::string,VerbCacheEntry&gt; m_verbCache;
<a name="l00188"></a>00188                 std::map&lt;uint32_t,RedirectHandler *&gt; m_handlersByIndex;
<a name="l00189"></a>00189                 
<a name="l00190"></a>00190                 <span class="keywordtype">int</span> removePrimary();
<a name="l00191"></a>00191                 <span class="keywordtype">int</span> removeAppId(<span class="keyword">const</span> std::string&amp; appId);
<a name="l00192"></a>00192                 <span class="keywordtype">int</span> swapHandler(uint32_t index);
<a name="l00193"></a>00193                 
<a name="l00194"></a>00194                 <span class="keywordtype">int</span> removeVerb(<span class="keyword">const</span> std::string&amp; verb,<a class="code" href="classRedirectHandler.htm">RedirectHandler</a>&amp; handler);
<a name="l00195"></a>00195                 <span class="keywordtype">int</span> removeAllVerbsOfHandler(<a class="code" href="classRedirectHandler.htm">RedirectHandler</a>&amp; handler);
<a name="l00196"></a>00196                 <span class="keywordtype">bool</span> isCurrentVerbHandler(<span class="keyword">const</span> std::string&amp; verb,<a class="code" href="classRedirectHandler.htm">RedirectHandler</a>&amp; handler);
<a name="l00197"></a>00197                 <span class="keywordtype">bool</span> pickRandomVerbHandler(<span class="keyword">const</span> std::string&amp; verb,uint32_t&amp; r_chosenIndex);
<a name="l00198"></a>00198                 <span class="keywordtype">bool</span> reassignRandomVerbHandler(<span class="keyword">const</span> std::string&amp; verb);
<a name="l00199"></a>00199                 
<a name="l00200"></a>00200                 <span class="keywordtype">bool</span> exists(<span class="keyword">const</span> std::string&amp; urlRe, <span class="keyword">const</span> std::string&amp; appId) {
<a name="l00201"></a>00201                         <span class="keywordflow">if</span> (m_redirectHandler.equals(urlRe,appId))
<a name="l00202"></a>00202                                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00203"></a>00203                         <span class="keywordflow">for</span> (std::vector&lt;RedirectHandler *&gt;::iterator it=m_alternates.begin();
<a name="l00204"></a>00204                                         it != m_alternates.end();++it)
<a name="l00205"></a>00205                         {
<a name="l00206"></a>00206                                 <span class="keywordflow">if</span> ((*it)-&gt;equals(urlRe,appId))
<a name="l00207"></a>00207                                         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00208"></a>00208                         }
<a name="l00209"></a>00209                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00210"></a>00210                 }
<a name="l00211"></a>00211                 
<a name="l00212"></a>00212                 <span class="keyword">virtual</span> ~RedirectHandlerNode();
<a name="l00213"></a>00213                 
<a name="l00214"></a>00214                 std::string toJsonString();
<a name="l00215"></a>00215                 <span class="keyword">struct </span>json_object * toJson();                  <span class="comment">//WARNING: memory allocated; caller must clean</span>
<a name="l00216"></a>00216                 <span class="keyword">static</span> MimeSystem::RedirectHandlerNode * fromJsonString(<span class="keyword">const</span> std::string&amp; jsonString);
<a name="l00217"></a>00217                 <span class="keyword">static</span> MimeSystem::RedirectHandlerNode * fromJson(<span class="keyword">struct</span> json_object * jobj);
<a name="l00218"></a>00218                 
<a name="l00219"></a>00219                 <span class="keywordtype">int</span> fixupVerbCacheTable(<span class="keyword">struct</span> json_object * jsonHandlerNodeEntry);
<a name="l00220"></a>00220         };
<a name="l00221"></a>00221 
<a name="l00222"></a>00222         <span class="keyword">class </span>ResourceHandlerNode {
<a name="l00223"></a>00223         <span class="keyword">public</span>:
<a name="l00224"></a>00224                 ResourceHandlerNode(<span class="keyword">const</span> std::string&amp; ext, 
<a name="l00225"></a>00225                                                 <span class="keyword">const</span> std::string&amp; contentType, 
<a name="l00226"></a>00226                                                 <span class="keyword">const</span> std::string&amp; appId, 
<a name="l00227"></a>00227                                                 <span class="keywordtype">bool</span> stream=<span class="keyword">false</span> ) : m_resourceHandler(ext,contentType,appId,stream) {
<a name="l00228"></a>00228                         m_handlersByIndex[m_resourceHandler.index()] = &amp;m_resourceHandler;
<a name="l00229"></a>00229                 }
<a name="l00230"></a>00230                 
<a name="l00231"></a>00231                 <a class="code" href="classResourceHandler.htm">ResourceHandler</a>         m_resourceHandler;
<a name="l00232"></a>00232                 std::vector&lt;ResourceHandler *&gt; m_alternates;
<a name="l00233"></a>00233                 std::map&lt;std::string,VerbCacheEntry&gt; m_verbCache;
<a name="l00234"></a>00234                 std::map&lt;uint32_t,ResourceHandler *&gt; m_handlersByIndex;
<a name="l00235"></a>00235                 
<a name="l00236"></a>00236                 <span class="keywordtype">int</span> removePrimary();
<a name="l00237"></a>00237                 <span class="keywordtype">int</span> removeAppId(<span class="keyword">const</span> std::string&amp; appId);
<a name="l00238"></a>00238                 <span class="keywordtype">int</span> swapHandler(uint32_t index);
<a name="l00239"></a>00239                 
<a name="l00240"></a>00240                 <span class="keywordtype">int</span> removeVerb(<span class="keyword">const</span> std::string&amp; verb,<a class="code" href="classResourceHandler.htm">ResourceHandler</a>&amp; handler);
<a name="l00241"></a>00241                 <span class="keywordtype">int</span> removeAllVerbsOfHandler(<a class="code" href="classResourceHandler.htm">ResourceHandler</a>&amp; handler);
<a name="l00242"></a>00242                 <span class="keywordtype">bool</span> isCurrentVerbHandler(<span class="keyword">const</span> std::string&amp; verb,<a class="code" href="classResourceHandler.htm">ResourceHandler</a>&amp; handler);
<a name="l00243"></a>00243                 <span class="keywordtype">bool</span> pickRandomVerbHandler(<span class="keyword">const</span> std::string&amp; verb,uint32_t&amp; r_chosenIndex);
<a name="l00244"></a>00244                 <span class="keywordtype">bool</span> reassignRandomVerbHandler(<span class="keyword">const</span> std::string&amp; verb);
<a name="l00245"></a>00245                 
<a name="l00246"></a>00246                 <span class="keywordtype">bool</span> exists(<span class="keyword">const</span> std::string&amp; extension,<span class="keyword">const</span> std::string&amp; appId,<span class="keyword">const</span> std::string&amp; contentType,<span class="keywordtype">bool</span> stream) {
<a name="l00247"></a>00247                         <span class="keywordflow">if</span> (m_resourceHandler.match(extension,appId,contentType,stream))
<a name="l00248"></a>00248                                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00249"></a>00249                         <span class="keywordflow">for</span> (std::vector&lt;ResourceHandler *&gt;::iterator it=m_alternates.begin();
<a name="l00250"></a>00250                         it != m_alternates.end();++it)
<a name="l00251"></a>00251                         {
<a name="l00252"></a>00252                                 <span class="keywordflow">if</span> ((*it)-&gt;match(extension,appId,contentType,stream))
<a name="l00253"></a>00253                                         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00254"></a>00254                         }
<a name="l00255"></a>00255                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00256"></a>00256                 }
<a name="l00257"></a>00257                 
<a name="l00258"></a>00258                 <span class="keywordtype">bool</span> exists(<span class="keyword">const</span> std::string&amp; appId,<span class="keyword">const</span> std::string&amp; contentType) {
<a name="l00259"></a>00259                         <span class="keywordflow">if</span> (m_resourceHandler.match(appId,contentType))
<a name="l00260"></a>00260                                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00261"></a>00261                         <span class="keywordflow">for</span> (std::vector&lt;ResourceHandler *&gt;::iterator it=m_alternates.begin();
<a name="l00262"></a>00262                         it != m_alternates.end();++it)
<a name="l00263"></a>00263                         {
<a name="l00264"></a>00264                                 <span class="keywordflow">if</span> ((*it)-&gt;match(appId,contentType))
<a name="l00265"></a>00265                                         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00266"></a>00266                         }
<a name="l00267"></a>00267                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00268"></a>00268                 }
<a name="l00269"></a>00269                 
<a name="l00270"></a>00270                 <span class="keyword">virtual</span> ~ResourceHandlerNode();
<a name="l00271"></a>00271                 
<a name="l00272"></a>00272                 std::string toJsonString();
<a name="l00273"></a>00273                 <span class="keyword">struct </span>json_object * toJson();                  <span class="comment">//WARNING: memory allocated; caller must clean</span>
<a name="l00274"></a>00274                 <span class="keyword">static</span> MimeSystem::ResourceHandlerNode * fromJsonString(<span class="keyword">const</span> std::string&amp; jsonString);
<a name="l00275"></a>00275                 <span class="keyword">static</span> MimeSystem::ResourceHandlerNode * fromJson(<span class="keyword">struct</span> json_object * jobj);
<a name="l00276"></a>00276                 
<a name="l00277"></a>00277                 <span class="keywordtype">int</span> fixupVerbCacheTable(<span class="keyword">struct</span> json_object * jsonHandlerNodeEntry);
<a name="l00278"></a>00278         };
<a name="l00279"></a>00279         
<a name="l00280"></a>00280         <span class="keyword">static</span> <span class="keywordtype">void</span> reclaimIndex(uint32_t idx);
<a name="l00281"></a>00281         
<a name="l00282"></a>00282         <span class="keyword">static</span> <span class="keywordtype">int</span> addVerbs(<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;&amp; verbs,ResourceHandlerNode&amp; resourceHandlerNode,<a class="code" href="classResourceHandler.htm">ResourceHandler</a>&amp; newHandler);
<a name="l00283"></a>00283         <span class="keyword">static</span> <span class="keywordtype">int</span> addVerbs(<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;&amp; verbs,RedirectHandlerNode&amp; redirectHandlerNode,<a class="code" href="classRedirectHandler.htm">RedirectHandler</a>&amp; newHandler);
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 <span class="keyword">public</span>:
<a name="l00286"></a>00286         
<a name="l00287"></a>00287         <span class="comment">//dbg</span>
<a name="l00288"></a>00288         <span class="keywordtype">bool</span>                            <a class="code" href="classMimeSystem.htm#a3612947eabbe7db427c248a7143ae5de">dbg_printMimeTables</a>();
<a name="l00289"></a>00289         <span class="keywordtype">bool</span>                            <a class="code" href="classMimeSystem.htm#a51c24205aa445ef7c2b51ded52f65151">dbg_getResourceTableStrings</a>(std::vector&lt;std::pair&lt;std::string,std::vector&lt;std::string&gt; &gt; &gt;&amp; r_resourceTableStrings);
<a name="l00290"></a>00290         <span class="keywordtype">bool</span>                            <a class="code" href="classMimeSystem.htm#a3a7c7a7ad97c4b7693f29be8f5dfe3b1">dbg_getRedirectTableStrings</a>(std::vector&lt;std::pair&lt;std::string,std::vector&lt;std::string&gt; &gt; &gt;&amp; r_redirectTableStrings);
<a name="l00291"></a>00291         <span class="keywordtype">void</span>                            <a class="code" href="classMimeSystem.htm#a3064cc16bd363325765e73b7f0ca1861">dbg_printVerbCacheTableForResource</a>(<span class="keyword">const</span> std::string&amp; mime);
<a name="l00292"></a>00292         <span class="keywordtype">void</span>                            <a class="code" href="classMimeSystem.htm#abaf99c2e12dbbf4ff317971054202c0a">dbg_printVerbCacheTableForRedirect</a>(<span class="keyword">const</span> std::string&amp; url);
<a name="l00293"></a>00293         <span class="keywordtype">void</span>                            <a class="code" href="classMimeSystem.htm#a18baef917e7c0b46e8fd872ed14eb339">dbg_printVerbCacheTableForScheme</a>(<span class="keyword">const</span> std::string&amp; url);
<a name="l00294"></a>00294         <span class="keyword">static</span> <span class="keywordtype">void</span>                     <a class="code" href="classMimeSystem.htm#ac46d03687d8d2832beaea651e219fc77">dbg_printVerbCacheTable</a>(<span class="keyword">const</span> std::map&lt;std::string,VerbCacheEntry&gt; * p_verbCacheTable);
<a name="l00295"></a>00295         <span class="keyword">static</span> <span class="keywordtype">void</span>                     <a class="code" href="classMimeSystem.htm#ab3b687c41d217871e588be55e3576d1a">dbg_printResourceHandlerNode</a>(<span class="keyword">const</span> ResourceHandlerNode * p_resourceHandlerNode,<span class="keywordtype">int</span> level=0);
<a name="l00296"></a>00296         <span class="keyword">static</span> <span class="keywordtype">void</span>                     <a class="code" href="classMimeSystem.htm#a32fbcd92a633c5d380343d8845eb622c">dbg_printRedirectHandlerNode</a>(<span class="keyword">const</span> RedirectHandlerNode * p_redirectHandlerNode,<span class="keywordtype">int</span> level=0);
<a name="l00297"></a>00297         
<a name="l00298"></a>00298 <span class="keyword">private</span>:
<a name="l00299"></a>00299 
<a name="l00300"></a>00300         ResourceHandlerNode *   getResourceHandlerNode(<span class="keyword">const</span> std::string&amp; mimeType);
<a name="l00301"></a>00301         RedirectHandlerNode *   getRedirectHandlerNode(<span class="keyword">const</span> std::string&amp; url);
<a name="l00302"></a>00302         RedirectHandlerNode *   getSchemeHandlerNode(<span class="keyword">const</span> std::string&amp; url);
<a name="l00303"></a>00303         
<a name="l00305"></a>00305         
<a name="l00306"></a>00306         <span class="keyword">static</span> <a class="code" href="classMimeSystem.htm">MimeSystem</a> * s_p_inst;
<a name="l00307"></a>00307         
<a name="l00308"></a>00308         <span class="keyword">static</span> <a class="code" href="classMutex.htm">Mutex</a>    s_mutex;
<a name="l00309"></a>00309         <a class="code" href="classMutex.htm">Mutex</a>                   m_mutex;
<a name="l00310"></a>00310         
<a name="l00311"></a>00311         std::map&lt;std::string,MimeSystem::ResourceHandlerNode *&gt; m_resourceHandlerMap;
<a name="l00312"></a>00312         std::map&lt;std::string,MimeSystem::RedirectHandlerNode *&gt; m_redirectHandlerMap;
<a name="l00313"></a>00313         
<a name="l00314"></a>00314         std::map&lt;std::string,std::string&gt;                                               m_extensionToMimeMap;
<a name="l00315"></a>00315         <span class="keyword">static</span> uint32_t         s_genIndex;
<a name="l00316"></a>00316         <span class="keyword">static</span> uint32_t         s_lastAssignedIndex;
<a name="l00317"></a>00317         <span class="keyword">static</span> std::vector&lt;uint32_t&gt; s_indexRecycler;
<a name="l00318"></a>00318         
<a name="l00319"></a>00319         <span class="keyword">typedef</span> std::map&lt;std::string,MimeSystem::ResourceHandlerNode *&gt; ResourceMapType;
<a name="l00320"></a>00320         <span class="keyword">typedef</span> std::map&lt;std::string,MimeSystem::ResourceHandlerNode *&gt;::iterator ResourceMapIterType;
<a name="l00321"></a>00321         <span class="keyword">typedef</span> std::map&lt;std::string,MimeSystem::RedirectHandlerNode *&gt; RedirectMapType;
<a name="l00322"></a>00322         <span class="keyword">typedef</span> std::map&lt;std::string,MimeSystem::RedirectHandlerNode *&gt;::iterator RedirectMapIterType;
<a name="l00323"></a>00323         <span class="keyword">typedef</span> std::map&lt;std::string,MimeSystem::VerbCacheEntry&gt; VerbCacheMapType;
<a name="l00324"></a>00324         <span class="keyword">typedef</span> std::map&lt;std::string,MimeSystem::VerbCacheEntry&gt;::iterator VerbCacheMapIterType;
<a name="l00325"></a>00325 };
<a name="l00326"></a>00326 
<a name="l00327"></a>00327 <span class="preprocessor">#endif </span><span class="comment">/*MIMESYSTEM_H_*/</span>
</pre></div></div><!-- contents -->
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Properties</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MimeSystem_8h.htm">MimeSystem.h</a>      </li>

    <li class="footer">Generated on Wed Sep 26 2012 07:32:48 for LunaSysMgr by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
